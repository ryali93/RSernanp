metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$Name
modelos
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 3),
modelo = rep(modelos, each = length(metricas))
)
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 15),
modelo = rep(modelos, each = length(metricas))
)
df2
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo, fill = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
# geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.8) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
# coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
library(fmsb)
# Crear un data frame de ejemplo
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Escalar los valores de cada métrica entre 0 y 1
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
m
# Crear el gráfico de radar con fmsb
radarchart(data.frame(m), axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
library(radarchart)
install.packages("radarchart")
library(radarchart)
# Crear un data frame de ejemplo
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Escalar los valores de cada métrica entre 0 y 1
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear el gráfico de radar con radarchart
radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
# Crear el gráfico de radar con radarchart
radarchart::radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
# Crear el gráfico de radar con radarchart
radarchart::chartJSRadar(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
# Crear el gráfico de radar con radarchart
fmsb::radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
load("clase2.Rdata")
1 > 3
5 != 5
1 > 3 | "a" == "b"
5 == 5 & "a" != "b"
5 %in% c(1,2,4,5,6)
1:5
1:20
if(10 %in% 1:20){
print("Se encuentra dentro")
}
if(10 %in% 20:40){
print("Se encuentra dentro")
}
10 %in% 20:40
if(10 %in% 20:40){
print("Se encuentra dentro")
}else{
print("No se encuentra dentro")
}
5%%2
4%%2
6%%2
if(6%%2 == 0){
print("Es multiplo de 2")
}else{
print("No es multiplo de 2")
}
if(9%%2 == 0){
print("Es multiplo de 2")
}else{
print("No es multiplo de 2")
}
df
df = read_excel("data/deforestacion_2022.xlsx")
library(readxl)
df = read_excel("data/deforestacion_2022.xlsx")
df
df$md_sup
df$md_sup > 10
sum(df$md_sup > 10)
x <- 0
if (x < 0) {
print("Numero negativo")
}else if (x > 0){
print("Numero positivo")
} else {
print("Cero")
}
x <- -10
if (x < 0) {
print("Numero negativo")
}else if (x > 0){
print("Numero positivo")
} else {
print("Cero")
}
x <- 20
if (x < 0) {
print("Numero negativo")
}else if (x > 0){
print("Numero positivo")
} else {
print("Cero")
}
temp <- c(15, 22, 30)
suelo <- c("seco", "humedo", "charcos")
temp
suelo
valtemp <- temp[1]
valsuelo <- suelo[3]
anp_codi <- c("RC02", "PN09", "CC01")
for (codi in anp_codi) {
print(codi)
}
numeros <- seq(1, 10, 2)
numeros
numeros <- seq(1, 10, 2)
for (num in numeros) {
potencia = 2^num
print(potencia)
}
numeros <- seq(1, 10, 2)
for (num in numeros) {
potencia = 2^num
print(potencia)
if(num > 100){
print("El valor es mayor que 100")
}
}
for (num in numeros) {
potencia = 2^num
print(potencia)
if(potencia > 100){
print("El valor es mayor que 100")
}
}
# creando la expresión con valor 1
inicio <- 1
inicio
# Creando el loop
while (inicio <= 5){
# Ver donde estamos
cat('Este es el ciclo número ', inicio)
# Agregar 1 a la variable inicio despues de cada iteracion
inicio <- inicio + 1
print(inicio)
}
suma <- function(a, b){
c = a + b
return(c)
}
suma(5, 6)
suma(10, 20)
# 1. Utilizando i <- 1, escriba un bucle while() que imprima la variable i,
#    (que se incrementa de 1 a 5), y se usa break para salir del bucle si i es igual 3.
# UTILIZAR break
inicio = 1
while (inicio <= 5){
print(inicio)
inicio = inicio + 1
if(inicio == 3) break
}
# 2. Escriba un bucle for() que imprima todos los valores excepto 3 en la
#    siguiente variable: i <- 1:5
# UTILIZAR next
i = c(1:5)
i
for(num in i){
if(num == 3) next
else print(num)
}
# FUNCION
suma <- function(a, b, c=4){
d = a + b + c
return(d)
}
suma(10, 20, 10)
suma(10, 20)
1:5
numero <- 1:5
for ( i in numero){
if (i == 3) next
else print(i)
}
list.files("data")
list.files()
list.files("data")
anp_codi
length(anp_codi)
library(tidyverse)
library(readxl)
defor_2022 <- read_excel("data/deforestacion_2022.xlsx")
defor_2022
head(defor_2022)
tail(defor_2022)
defor_2022
View(defor_2022)
# DPLYR
## filter
filter(defor_2022, anp_codi == "RC02")
# DPLYR
## filter
filter(defor_2022, anp_codi == "RC02" & md_causa == 14)
# DPLYR
## filter
filter(defor_2022, anp_codi == "RC02" & md_causa == 1)
# DPLYR
## filter
# md_causa: 1 = Agropecuario
# md_causa: 2 =
nrow(defor_2022)
# DPLYR
## filter
# md_causa: 1 = Agropecuario
# md_causa: 2 =
nrow(filter(defor_2022, anp_codi == "RC02"))
nrow(filter(defor_2022, anp_codi == "RC02" & md_causa == 1))
nrow(filter(defor_2022, anp_codi == "RC02" & md_causa != 1))
filter(defor_2022, anp_codi == "RC02" & md_causa != 1)
## select
select(defor_2022, anp_codi, md_causa, md_sup)
select(filter(defor_2022, anp_codi == "RC02" & md_causa != 1), anp_codi, md_causa, md_sup)
## PIPE
defor_2022 %>%
filter(anp_codi == "RC02" & md_causa != 1) %>%
select(anp_codi, md_causa, md_sup)
## PIPE
defor_2022 %>%
filter(anp_codi == "RC02" & md_causa != 1) %>%
select(md_zonif, md_causa, md_sup)
## PIPE
defor_2022 %>%
filter(anp_codi == "RC02") %>%
select(md_zonif, md_causa, md_sup) %>%
arrange(md_causa)
## PIPE
defor_2022 %>%
filter(anp_codi == "RC02") %>%
select(md_zonif, md_causa, md_sup) %>%
arrange(md_causa) %>%
mutate(md_m2 = md_sup*10000)
select(filter(defor_2022, anp_codi == "RC02" & md_causa != 1), anp_codi, md_causa, md_sup)
View(defor_2022)
defor_2022 %>%
filter(anp_codi == "RC02") %>%
select(md_zonif, md_causa, md_sup) %>%
group_by(md_zonif)
defor_2022 %>%
filter(anp_codi == "RC02") %>%
select(md_zonif, md_causa, md_sup) %>%
group_by(md_zonif) %>%
summarise(area = sum(md_sup))
defor_2022 %>%
filter(anp_codi == "RC02") %>%
select(md_zonif, md_causa, md_sup) %>%
group_by(md_zonif, md_causa) %>%
summarise(area = sum(md_sup))
defor_2022 %>%
mutate(anp_cate = str_extract(anp_codi))
str_extract(anp_codi)
defor_2022 %>%
mutate(anp_cate = str_extract(anp_codi, "[a-z]+"))
defor_2022 %>%
mutate(anp_cate = str_extract(anp_codi, "[a-z]+")) %>%
View()
defor_2022 %>%
mutate(anp_cate = str_sub(anp_codi, 1, 2)) %>%
View()
defor_2022
defor_2022 %>%
mutate(anp_cate = str_sub(anp_codi, 1, 2)) %>%
View()
defor_2022 %>%
mutate(anp_cate = str_sub(anp_codi, 1, 2)) %>%
group_by (anp_cate, md_causa)%>%
summarise (area = sum( md_sup))
defor_2022 %>%
filter(md_causa == 6)
defor_2022 %>%
filter(md_causa == 6) %>%
mutate(mes = months.Date(md_fecimg))
defor_2022 %>%
filter(md_causa == 6) %>%
mutate(mes = months.Date(md_fecimg)) %>%
View()
defor_2022 %>%
filter(md_causa == 6) %>%
mutate(mes = months.Date(md_fecimg)) %>%
group_by(mes) %>%
summarise(sum(md_sup))
defor_2022 %>%
filter(anp_codi == "RC02") %>%
mutate(mes = months.Date(md_fecimg)) %>%
group_by(mes) %>%
summarise(sum(md_sup))
defor_2022 %>%
filter(anp_codi == "RC02") %>%
mutate(mes = months.Date(md_fecimg)) %>%
group_by(mes) %>%
summarise(area = sum(md_sup))
defor_rc02 <- defor_2022 %>%
filter(anp_codi == "RC02") %>%
mutate(mes = months.Date(md_fecimg)) %>%
group_by(mes) %>%
summarise(area = sum(md_sup))
write_csv(defor_rc02, "data/defor_rc02.csv")
defor_2022 %>%
mutate(anp_cate = str_sub(anp_codi, 1, 2)) %>%
group_by (anp_cate, md_causa)%>%
summarise (area = sum( md_sup))
cate_causa <- defor_2022 %>%
mutate(anp_cate = str_sub(anp_codi, 1, 2)) %>%
group_by (anp_cate, md_causa)%>%
summarise (area = sum( md_sup))
cate_causa
plot(5)
plot(c(1,2,3,4))
plot(x = c(1,2,3,4),
y = c(5,6,7,8))
plot(x = c(1,2,3,4),
y = c(5,6,7,8), "l")
defor_2022 %>%
filter(anp_codi == "RC02") %>%
mutate(mes = months.Date(md_fecimg)) %>%
group_by(mes) %>%
summarise(area = sum(md_sup))
