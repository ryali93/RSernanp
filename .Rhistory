table(anp_h$CATEGORIAS)
anp_h %>%
filter(!is.na(valor) & CATEGORIAS == "ZR") %>%
group_by(año) %>%
summarise(n()) %>%
t() %>%
as.data.frame() %>%
View()
# Analisis de datos espaciales con R
library(rgdal)
defor = rgdal::GDALinfo("data/def_2022/SERNANP_Def_2022.shp")
defor = rgdal::readGDAL("data/def_2022/SERNANP_Def_2022.shp")
defor = rgdal::readOGR("data/def_2022/SERNANP_Def_2022.shp")
defor
library(raster)
getData('alt', country='NPL', mask=TRUE)
alt
getwd()
list.files()
SRTM_nepal=raster('NPL_msk_alt.grd')
SRTM_nepal
getData('alt', country='PER', mask=TRUE)
SRTM_peru = raster('PER_msk_alt.grd')
SRTM_peru
plot(SRTM_peru)
raster("PER_msk_alt.grd")
library(leaflet)
wms_anp = "http://geoservicios.sernanp.gob.pe/arcgis/services/representatividad/peru_sernanp_010201/MapServer/WMSServer"
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 15) %>%
addWMSTiles(
wms_anp,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
wms_anp = "http://geoservicios.sernanp.gob.pe/arcgis/services/representatividad/peru_sernanp_010201/MapServer/WMSServer"
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 15) %>%
addWMSTiles(
wms_anp,
layers = 1,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
wms_anp = "http://geoservicios.sernanp.gob.pe/arcgis/services/representatividad/peru_sernanp_010200/MapServer/WMSServer"
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 15) %>%
addWMSTiles(
wms_anp,
layers = 1,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 15) %>%
addWMSTiles(
wms_anp,
layers = 0,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = 0,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = NA,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = 0,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
wms_anp = "https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer"
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = 0,
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = TRUE)
)
wms_anp
leaflet() %>%
setView(lng = -75, lat = -15, zoom = 9) %>%
addWMSTiles(
wms_anp,
layers = "0"
)
wms_modis<-"https://api.ellipsis-drive.com/v3/ogc/wms/7943dae4-4ad7-4cc3-82b4-a458c3476b28?request=getCapabilities&token=epat_Zr00OcopSu24najgtpxmUxea5YcNwrKPzwGpFbuRXv74uqxvYjR13xZduCFj5kcI"
leaflet()  %>% setView(lng = -2.683 , lat =43.31 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_modis,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = F)
)
leaflet()  %>% setView(lng = -2.683 , lat =43.31 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = F)
)
leaflet()  %>% setView(lng = -2.683 , lat =43.31 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = F)
)
wms_anp
leaflet()  %>% setView(lng = -75 , lat = -15 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = F)
)
wms_anp <- "http://geoservicios.sernanp.gob.pe/arcgis/services/representatividad/peru_sernanp_010201/MapServer/WMSServer"
leaflet()  %>% setView(lng = -75 , lat = -15 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = F)
)
leaflet()  %>% setView(lng = -75 , lat = -15 , zoom = 10) %>% addTiles() %>%
addWMSTiles(
wms_anp,
layers = "0",
options = WMSTileOptions(format = "image/png", transparent = T)
)
# WFS
url <- parse_url("https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010201/MapServer/WFSServer?request=GetCapabilities&service=WFS&request=GetFeature&typeName=ANP_de_Administracion_Nacional_Definitiva")
library(httr)
url <- parse_url("https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010201/MapServer/WFSServer")
url
url <- parse_url("https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010201/MapServer/WFSServer")
url$query <- list(service = "wfs",
#version = "2.0.0", # facultative
request = "GetCapabilities"
service = "WFS"
url$query <- list(#version = "2.0.0", # facultative
request = "GetCapabilities",
service = "WFS",
request = "GetFeature",
typeName = "ANP_de_Administracion_Nacional_Definitiva",
)
url$query <- list(#version = "2.0.0", # facultative
request = "GetCapabilities",
service = "WFS",
# request = "GetFeature",
typeName = "ANP_de_Administracion_Nacional_Definitiva",
)
url$query <- list(request = "GetCapabilities",
service = "WFS",
# request = "GetFeature",
typeName = "ANP_de_Administracion_Nacional_Definitiva",
)
url$query <- list(request = "GetCapabilities",
service = "WFS",
request = "GetFeature",
typeName = "ANP_de_Administracion_Nacional_Definitiva"
)
request <- build_url(url)
request
request
bwk_client <- WFSClient$new(request,
serviceVersion = "2.0.0")
anp_wfs <- read_sf(request)
library(sf)
anp_wfs <- read_sf(request)
anp_wfs
request
url_zr = "https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010202/MapServer/WFSServer?request=GetCapabilities&service=WFS&request=GetFeature&typeName=ANP_de_Administración_Nacional_Transitoria"
zr_wfs = read_sf(url_zr)
url_zr = "https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010202/MapServer/WFSServer"
url_zr$query = list(
request="GetCapabilities",
service="WFS",
request="GetFeature",
typeName="ANP_de_Administración_Nacional_Transitoria"
)
url_zr
url_zr
url_zr = "https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010202/MapServer/WFSServer"
url_zr$query = list(
request="GetCapabilities",
service="WFS",
request="GetFeature",
typeName="ANP_de_Administración_Nacional_Transitoria"
)
request <- build_url(url_zr)
url_zr
request <- build_url(url_zr)
url
build_url(url)
url_zr = parse_url("https://geospatial.sernanp.gob.pe/arcgis_server/services/base_fisica/peru_sernanp_010202/MapServer/WFSServer")
url_zr$query = list(
request="GetCapabilities",
service="WFS",
request="GetFeature",
typeName="ANP_de_Administración_Nacional_Transitoria"
)
request <- build_url(url_zr)
zr_wfs = read_sf(request)
library(leaflet.esri)
install.packages("leaflet.esri")
library(leaflet.esri)
library(leaflet.esri)
setView(-75, -15, 8) %>%
addTiles('https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/0',
options = providerTileOptions(noWrap = TRUE), group="World Imagery")
leaflet() %>% setView(-75, -15, 8) %>%
addTiles('https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/0',
options = providerTileOptions(noWrap = TRUE), group="World Imagery")
leaflet() %>% setView(-75, -15, 8) %>%
addTiles('https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/0', group="World Imagery")
url_esri <- "https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/0"
leaflet() %>%
setView(-78,-15,8) %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = "0",
options = featureLayerOptions(useCors = FALSE)
)
leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE),group="Labels") %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = "0",
options = featureLayerOptions(useCors = FALSE)
)
url_esri <- "https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/"
leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE),group="Labels") %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = "0",
options = featureLayerOptions(useCors = FALSE)
)
leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE),group="Labels") %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = 0,
options = featureLayerOptions(useCors = FALSE)
)
url_esri <- "https://geoservicios.sernanp.gob.pe/arcgis/rest/services/representatividad/peru_sernanp_010201/MapServer/0"
leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE),group="Labels") %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = 0,
options = featureLayerOptions(useCors = FALSE)
)
url_esri <- "https://geoservicios.sernanp.gob.pe/arcgis/rest/services/servicios_ogc/peru_sernanp_0102/MapServer/0"
leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE),group="Labels") %>%
addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = 0,
options = featureLayerOptions(useCors = FALSE)
)
l <- leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="Labels")
l <- leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="Labels")
l <- leaflet() %>%
setView(-78,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="Labels")
l %>%   addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = "AAAA",
options = featureLayerOptions(useCors = FALSE)
)
l <- leaflet() %>%
setView(-74,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="Labels")
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE , group = "AAAA",
options = featureLayerOptions(useCors = FALSE)
)
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_codi}</h3><hr />",
"      <p>This tree is located at {anp_codi} and its scientific name is {anp_codi}.</p>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_codi}</h3><hr />",
"      <p>This tree is located at {anp_nomb} and its scientific name is {anp_codi}.</p>",
"      <table>
<tr>
<th>Company</th>
<th>Contact</th>
<th>Country</th>
</tr>
<tr>
<td>Alfreds Futterkiste</td>
<td>Maria Anders</td>
<td>Germany</td>
</tr>
<tr>
<td>Centro comercial Moctezuma</td>
<td>Francisco Chang</td>
<td>Mexico</td>
</tr>
</table>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
l <- leaflet() %>%
setView(-74,-15,8) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="World Imagery") %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/Mapserver/tile/{z}/{y}/{x}', options = providerTileOptions(noWrap = TRUE), group="Labels")
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_codi}</h3><hr />",
"      <p>This tree is located at {anp_nomb} and its scientific name is {anp_codi}.</p>",
"      <table>
<tr>
<th>Company</th>
<th>Contact</th>
<th>Country</th>
</tr>
<tr>
<td>Alfreds Futterkiste</td>
<td>Maria Anders</td>
<td>Germany</td>
</tr>
<tr>
<td>Centro comercial Moctezuma</td>
<td>Francisco Chang</td>
<td>Mexico</td>
</tr>
</table>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_codi}</h3><hr />",
"      <p>This tree is located at {anp_nomb} and its scientific name is {anp_codi}.</p>",
"      <table><tr><th>Company</th><th>Contact</th><th>Country</th></tr><tr><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Germany</td></tr><tr><td>Centro comercial Moctezuma</td><td>Francisco Chang</td><td>Mexico</td></tr></table>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_codi}</h3><hr />",
"      <p>Esto se puede configurar {anp_nomb}.</p>",
"      <table><tr><th>Código</th><th>Categoría</th></tr><tr><td>{anp_codi}</td><td>{anp_cate}</td></tr></table>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
l %>% addEsriFeatureLayer(
url=url_esri,
useServiceSymbology = TRUE ,
labelProperty = "anp_codi", labelOptions = labelOptions(textsize = "12px"),
popupProperty = JS(paste0(
"function(feature) {",
"  return L.Util.template(",
"    \"<h3>{anp_nomb}</h3><hr />",
"      <p>Esto se puede configurar {anp_codi}.</p>",
"      <table><tr><th>Código</th><th>Categoría</th></tr><tr><td>{anp_codi}</td><td>{anp_cate}</td></tr></table>",
"    \",",
"    feature.properties",
"  );",
"}"
))
)
library(sf)
library(sp)
# Leer datos shapefile
dep <- read_sf("data/Departamentos.shp")
# Leer datos shapefile
readRDS("data/file.RDS")
countries_spdf
library(sp)
countries_sp <- readRDS("data/countries_sp.rda")
countries_sp <- load(file = "data/countries_sp.rda")
countries_sp
# countries_sp <- readRDS("da")
# Print countries_sp
print(countries_sp)
# Haciendo un resumen de countries_sp
summary(countries_sp)
countries_spdf <- load("data/countries_spdf.rda")
countries_spdf
# Revisar que encontramos en el objeto countries_spdf con str()
# str(countries_spdf)
# str() countries_spdf con max.level = 2
str(countries_spdf, max.level = 2)
countries_spdf <- load(file="data/countries_spdf.rda")
countries_spdf
# ---------------------------------------------------------------
install.packages("openair")
library(tmap)
# Agregando estilo a tm_fill()
tm_shape(countries_spdf) +
tm_fill(col = "population", style = "quantile") +
# Agregaremos la capa de l?mites tm_borders()
tm_borders("burlywood4")
download.file("http://s3.amazonaws.com/assets.datacamp.com/production/course_1816/datasets/02_countries_spdf.rds","data/02_countries_spdf.rds")
countries_spdf <- load(file="data/02_countries_spdf.rds")
library(sp)
countries_spdf <- load(file="data/02_countries_spdf.rds")
countries_spdf <- readRDS("data/02_countries_spdf.rds")
countries_spdf
# Revisar que encontramos en el objeto countries_spdf con str()
# str(countries_spdf)
# str() countries_spdf con max.level = 2
str(countries_spdf, max.level = 2)
## TMAP
## Representaciones
library(sp)
library(tmap)
# Usaremos qtm() para crear un mapa de choropetas con la variable gdp
qtm(shp=countries_spdf, fill="gdp")
# Usaremos tm_bubbles() en vez de tm_fill()
tm_shape(countries_spdf) +
tm_bubbles(size = "population") +
# Agregaremos la capa de l?mites tm_borders()
tm_borders("burlywood4")
proj = "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +ellps=GRS80 +datum=NAD83"
raster::shapefile("Departamentos.shp")
proj = "+proj=longlat +ellps=WGS84 +no_defs"
st_crs(3218)
# Switch to a Hobo-Dyer projection
tm_shape(countries_spdf, projection = proj) +
tm_grid(n.x = 11, n.y = 11) +
tm_fill(col = "population", style = "quantile")  +
tm_borders(col = "burlywood4")
# Switch to a Robinson projection
robin <- "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
tm_shape(countries_spdf, projection = robin) +
tm_grid(n.x = 11, n.y = 11) +
tm_fill(col = "population", style = "quantile")  +
tm_borders(col = "burlywood4")
# Add tm_style("classic") to your plot
tm_shape(countries_spdf, projection = robin) +
tm_grid(n.x = 11, n.y = 11) +
tm_fill(col = "population", style = "quantile")  +
tm_borders(col = "burlywood4") +
tm_style("classic")
