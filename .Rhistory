library(magrittr)
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>% extract2(2))
df["Name"] %>% mutate(channels = extract2(strsplit(Name, "_"), 2))
df["Name"] %>% mutate(channels = strsplit(Name, "_"))
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>% `[[`(1))
library(purrr)
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>% pluck(4))
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>% pluck(2))
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>%   `[[`(1))
df["Name"] %>% mutate(channels = strsplit(Name, "_") %>%   `[[`(2))
df["Name"] %>% mutate(channels = strsplit(Name, "_"))
df["Name"] %>% mutate(channels = strsplit(Name, "_")%>%
map(`[[`, 1))
df %>%
mutate(numero = str_extract(Name, "\\d+"))
df["Name"] %>%
mutate(numero = str_extract(Name, "\\d+"))
df["Name"] %>%
mutate(numero = str_extract(Name, "\\d+b"))
df["Name"] %>%
df = df %>%
select(Name, val_f1, val_precision, val_recall) %>% #, val_dice_loss, val_iou_loss, val_loss
mutate(channels = str_extract(Name, "\\d+b"))# %>%
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df["Name"] %>%
df = df %>%
select(Name, val_f1, val_precision, val_recall) %>% #, val_dice_loss, val_iou_loss, val_loss
mutate(channels = str_extract(Name, "\\d+b"))# %>%
df %>%
select(Name, val_f1, val_precision, val_recall) %>% #, val_dice_loss, val_iou_loss, val_loss
mutate(channels = str_extract(Name, "\\d+b"))
df = df %>%
select(Name, val_f1, val_precision, val_recall) %>% #, val_dice_loss, val_iou_loss, val_loss
mutate(channels = str_extract(Name, "\\d+b"))
# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA") #, "blue", "red", "green"
ggradar(df,
# values.radar = paste0(sprintf("%s", seq(10, 100, 10)), "%"),
values.radar = sprintf("%s", seq(0.1, 1, 0.1)),
grid.min = 0,
grid.mid = 0.5,
grid.max = 1,
background.circle.colour = "white",
axis.line.colour = "gray60",
gridline.min.colour = "gray60",
gridline.mid.colour = "gray60",
gridline.max.colour = "gray60",
group.colours = lcols) +
theme(
legend.position = c(1, 0),
legend.justification = c(1, 0),
legend.text = element_text(size = 12, family = "roboto"),
legend.key = element_rect(fill = NA, color = NA),
legend.background = element_blank()
)
df
df["Name"] %>%
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels = "15b") %>%
select(Name, val_f1, val_precision, val_recall) %>%  #, val_dice_loss, val_iou_loss, val_loss
# mutate(val_iou_loss = val_iou_loss/100) %>%
# mutate(val_loss = case_when(val_loss > 1 ~ 0,
#                             val_loss <= 1 ~ val_loss)) %>%
# filter(Name %in% c("Unet_attention_normOk", "Unet_attention_norm", "ResUnet_norm"))
# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA") #, "blue", "red", "green"
df
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels = "15b") %>%
select(Name, val_f1, val_precision, val_recall) %>%  #, val_dice_loss, val_iou_loss, val_loss
# mutate(val_iou_loss = val_iou_loss/100) %>%
# mutate(val_loss = case_when(val_loss > 1 ~ 0,
#                             val_loss <= 1 ~ val_loss)) %>%
# filter(Name %in% c("Unet_attention_normOk", "Unet_attention_norm", "ResUnet_norm"))
# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA") #, "blue", "red", "green"
df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels = "15b")
df
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) %>%  #, val_dice_loss, val_iou_loss, val_loss
# mutate(val_iou_loss = val_iou_loss/100) %>%
# mutate(val_loss = case_when(val_loss > 1 ~ 0,
#                             val_loss <= 1 ~ val_loss)) %>%
# filter(Name %in% c("Unet_attention_normOk", "Unet_attention_norm", "ResUnet_norm"))
# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA") #, "blue", "red", "green"
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
# Color for the lines
lcols <- c("#EEA236", "#5CB85C", "#46B8DA") #, "blue", "red", "green"
ggradar(df,
# values.radar = paste0(sprintf("%s", seq(10, 100, 10)), "%"),
values.radar = sprintf("%s", seq(0.1, 1, 0.1)),
grid.min = 0,
grid.mid = 0.5,
grid.max = 1,
background.circle.colour = "white",
axis.line.colour = "gray60",
gridline.min.colour = "gray60",
gridline.mid.colour = "gray60",
gridline.max.colour = "gray60",
group.colours = lcols) +
theme(
legend.position = c(1, 0),
legend.justification = c(1, 0),
legend.text = element_text(size = 12, family = "roboto"),
legend.key = element_rect(fill = NA, color = NA),
legend.background = element_blank()
)
library(ggforce)
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Crear una matriz con los valores normalizados de las métricas
matriz <- as.matrix(df[, -1] / 1)
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(matriz[1, ], matriz[2, ], matriz[3, ]),
metrica = rep(metricas, 3),
modelo = rep(modelos, each = length(metricas))
)
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_path() +
coord_polar() +
ggtitle("Gráfico de Radar") +
scale_color_discrete(name = "Modelos") +
theme_bw()
library(fmsb)
install.packages("fmsb")
library(fmsb)
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
# mutate(val_iou_loss = val_iou_loss/100) %>%
# mutate(val_loss = case_when(val_loss > 1 ~ 0,
#                             val_loss <= 1 ~ val_loss)) %>%
# filter(Name %in% c("Unet_attention_normOk", "Unet_attention_norm", "ResUnet_norm"))
radarchart(df)
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
row.names(df) = df$Name
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
df
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
row.names(df) = df$Name
rownames(df)
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
rownames(df) = df$Name
rownames(df)
df$Name
row.names(df) = df$Name
row.names(df)
df
str_split(df$Name)
str_split(df$Name, "_")
row.names(df) = lapply(str_split(df$Name, "_"), first())
lapply(str_split(df$Name, "_"), first)
row.names(df) = lapply(str_split(df$Name, "_"), first)
row.names(df) = lapply(str_split(df$Name, "_"), first) %>%  unlist()
lapply(str_split(df$Name, "_"), first) %>%  unlist()
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
# mutate(val_iou_loss = val_iou_loss/100) %>%
# mutate(val_loss = case_when(val_loss > 1 ~ 0,
#                             val_loss <= 1 ~ val_loss)) %>%
# filter(Name %in% c("Unet_attention_normOk", "Unet_attention_norm", "ResUnet_norm"))
radarchart(df)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
create_beautiful_radarchart(df)
library(ggiraphExtra)
install.packages("ggiraphExtra")
library(ggiraphExtra)
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 3),
modelo = rep(modelos, each = length(metricas))
)
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo, fill = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
df
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
df
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
df
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T11_00_21.324+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$Name
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 3),
modelo = rep(modelos, each = length(metricas))
)
df2
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo, fill = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
df
df = read_csv("/home/ryali93/Desktop/landslide4sense2022/figures/wandb_export_2023-03-30T12_21_58.180+02_00.csv")
df = df %>%
mutate(channels = str_extract(Name, "\\d+b")) %>%
filter(channels == "15b") %>%
select(Name, val_f1, val_precision, val_recall) # %>%  #, val_dice_loss, val_iou_loss, val_loss
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$Name
modelos
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 3),
modelo = rep(modelos, each = length(metricas))
)
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
matriz = c(as.matrix(df[, -1])),
metrica = rep(metricas, 15),
modelo = rep(modelos, each = length(metricas))
)
df2
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo, fill = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
# geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.5) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.8) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
# Crear el gráfico de radar
ggplot(df2, aes(x = metrica, y = matriz, group = modelo, color = modelo)) +
geom_polygon(alpha = 0.2) +
# coord_radar() +
scale_fill_discrete(name = "Modelos") +
ggtitle("Gráfico de Radar") +
theme_bw()
library(fmsb)
# Crear un data frame de ejemplo
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Escalar los valores de cada métrica entre 0 y 1
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear un data frame con los valores normalizados y los nombres de las métricas y los modelos
df2 <- data.frame(
modelo = rep(modelos, each = ncol(m)),
metrica = rep(metricas, nrow(m)),
valor = as.vector(m)
)
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
m
# Crear el gráfico de radar con fmsb
radarchart(data.frame(m), axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
# Crear el gráfico de radar con fmsb
radarchart(m, axistype = 1, maxmin = cbind(max_val, min_val), pcol = rainbow(length(modelos)), plwd = 3, cglcol = "grey", cglty = 1, axislabcol = "black", title = "Gráfico de Radar")
library(radarchart)
install.packages("radarchart")
library(radarchart)
# Crear un data frame de ejemplo
df <- data.frame(
modelo = c("Modelo 1", "Modelo 2", "Modelo 3"),
metrica1 = c(0.6, 0.8, 0.7),
metrica2 = c(0.5, 0.9, 0.6),
metrica3 = c(0.7, 0.6, 0.8)
)
# Escalar los valores de cada métrica entre 0 y 1
df[, -1] <- apply(df[, -1], 2, function(x) (x - min(x)) / (max(x) - min(x)))
# Crear una lista con los nombres de las métricas
metricas <- colnames(df[, -1])
# Crear una lista con los nombres de los modelos
modelos <- df$modelo
# Crear una matriz con los valores normalizados
m <- as.matrix(df[, -1])
# Crear un vector con los valores máximos para cada métrica
max_val <- rep(1, ncol(m))
# Crear un vector con los valores mínimos para cada métrica
min_val <- rep(0, ncol(m))
# Crear el gráfico de radar con radarchart
radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
legend(x = 0.8, y = 0.2, legend = modelos, pch = 20, col = rainbow(length(modelos)), bty = "n")
# Crear el gráfico de radar con radarchart
radarchart::radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
# Crear el gráfico de radar con radarchart
radarchart::chartJSRadar(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
# Crear el gráfico de radar con radarchart
fmsb::radarchart(
m,
axistype = 1,
pcol = rainbow(length(modelos)),
pfcol = adjustcolor(rainbow(length(modelos)), alpha.f = 0.2),
plwd = 3,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
vlcex = 0.8,
vlcexax = 0.8,
paxislabels = metricas,
title = "Gráfico de Radar"
)
