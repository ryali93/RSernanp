{"title":"Introducción a los lenguajes de programación","markdown":{"headingText":"Introducción a los lenguajes de programación","containsRefs":false,"markdown":"\n## Lenguajes de programación\n\nUn lenguaje de programación es una forma de comunicarnos con una computadora e indicarle qué queremos hacer. En otras palabras, nos permitirá darle instrucciones y reglas que permiten crear herramientas, programas, realizar análisis o tareas específicas.\n\nExisten distintos tipos de lenguaje, según la conexión entre el software y hardware podemos diferenciarlos en lenguajes bajo nivel y de alto nivel. La diferencia se encuentra en lo cerca o lejos que estemos del hardware de nuestro equipo.\n\nAdemás, podemos diferenciarlos según el propósito o el modo de uso, aquellos que están orientados al desarrollo y aquellos que están orientados al análisis. Los lenguajes orientados al desarrollo se utilizan para crear aplicaciones y programas, mientras que los lenguajes orientados al análisis se utilizan para procesar y analizar datos.\n\n![Lenguajes de programación](fig/lenguajes.png)\n\n## Interfaz de Desarrollo Integrado (IDE) y editor de texto\n\n![IDEs y editores de texto](fig/ide_texteditor.png)\n\n## ¿Qué es R?\n\nR es un lenguaje de programación y entorno computacional dedicado a la estadística que proporciona un amplio abanico de herramientas estadísticas (modelos lineales y no lineales, tests estadísticos, análisis de series temporales, algoritmos de clasificación y agrupamiento, etc.)\n\nPermite definir funciones propias. De hecho, gran parte de las funciones de R están escritas en el mismo R, aunque para algoritmos computacionalmente exigentes es posible desarrollar bibliotecas en C, C++ o Fortran que se cargan dinámicamente.\n\nR puede integrarse con distintas bases de datos y existen bibliotecas que facilitan su utilización desde lenguajes de programación interpretados como Python (PythonInR), hereda de S su orientación a objetos.\n\nOtra de las características de R es su capacidad gráfica, que permite generar gráficos con alta calidad (ggplot). R posee su propio formato para la documentación basado en LaTeX.\n\n<img src=\"https://cran.r-project.org/Rlogo.svg\" width=\"300\"/>\n\n## ¿Qué es RStudio?\n\nRStudio es un editor para scripts disponible para usuarios de R en todos los sistemas operativos. Es considerado como un <u>entorno de desarrollo integrado (GUI)</u>que combina un interfaz muy intuitiva con herramientas de código muy potentes que permiten sacar el máximo provecho a R.\n\nLa ventaja de este editor es que ofrece una serie de opciones no existentes en R, entre otras, por ejemplo, comprobar rápidamente que ningún paréntesis queda sin cerrarse o marcar, copiar y pegar columnas.\n\nPero además nos da un listado de las variables y nos da una descripción de los bancos de datos que hemos introducido. También tiene una lista de los paquetes instalados y los gráficos realizados.\n\n<img src=\"fig/s01_rstudio_logo.png\" width=\"400\"/>\n\n## ¿Qué otros IDE's existen para R?\n\n-   Tinn-R\n-   RKward\n-   Rcommander\n-   Jupyter notebook\n-   Visual studio code\n-   Pycharm\n-   Eclipse\n\n## Instalación de R, RStudio y RTools\n\n### R y RStudio\n\nPrimero deberá descargar e instalar R y luego RStudio.\n\n**Instalación de R**\n\nPara instalar R hay que bajar un fichero ejecutable de la página web del proyecto R: [**http://www.r-project.org/**](http://www.r-project.org/). Actualmente (Marzo 2023), la versión más reciente de R para el entorno Windows es la 4.2.3 y el ejecutable de tamaño aproximadamente 77Mb tiene el nombre R-4.2.3-win.exe.\n\n**Instalación de RStudio**\n\nPara instalar RStudio nos dirigimos al enlace <http://www.rstudio.org/>,la versión en pruebas es gratuita.Una vez bajado este ejecutable, hay que ejecutarlo y seguir las instrucciones del programa de instalación.\n\n### RTools\n\nEs un paquete de herramientas para construir paquetes de R. Esto es lo que desea para construir sus propios paquetes en Windows, o para construir R por sí mismo. A partir de **R 4.3.0** (2023), R para Windows usa un paquete de cadena de herramientas llamado <u>rtools43</u>.\n\nEsta versión de <u>Rtools</u> incluye gcc 8.3.0 e introduce un nuevo sistema de compilación basado en [**msys2**\\`](https://www.msys2.org/), que facilita la compilación y el mantenimiento de R, así como las bibliotecas del sistema que necesitan los paquetes de R en Windows. Las compilaciones recientes de **rtools43** también contienen una cadena de herramientas adicional gcc-10 ucrt para probar paquetes de R y bibliotecas del sistema con las compilaciones ucrt experimentales de R-devel.\n\n## Tipos de lenguajes de programación\n\n### Lenguaje compilado\n\nSon aquellos lenguajes de alto nivel que como su nombre lo sugiere, requieren de un compilador (programa que traduce un lenguaje de alto nivel en código máquina o lenguaje máquina) para traducirlo y crear la parte ejecutable.\n\n-   C++\n-   Go\n\n### Lenguaje interpretado\n\nSon aquellos lenguajes de programación también de alto nivel en donde el código fuente debe ser traducido a un lenguaje que la máquina entienda y pueda realizar, no crean un archivo externo.\n\n-   Ruby\n-   Javascript\n-   Python\n-   R\n\nLos lenguajes de alto nivel permiten escribir instrucciones en un idioma muy parecido al inglés así como hacer uso de notaciones matemáticas comunes.\n\n### Lenguaje intermedio\n\nLos lenguajes intermedios son compilados hacia programas intermedios y luego interpretados, esto permite que pueda ser ejecutado desde cualquier sistema operativo sin necesidad de crear ejecutables.\n\n-   Java\n-   C#\n\n<img src=\"fig/s01_tipos_lenguaje.png\" width=\"600\"/>\n\n## Paradigmas de programación\n\nUn paradigma de programación es una manera o estilo de programación de software. Se trata de un conjunto de métodos sistemáticos aplicables en todos los niveles del diseño de programas para resolver problemas computacionales.\n\n### Programación Orientado a Objetos\n\nSe construyen modelos de objetos que representan elementos (objetos) del problema a resolver, que tienen características y funciones. Permite separar los diferentes componentes de un programa, simplificando así su creación, depuración y posteriores mejoras. La programación orientada a objetos disminuye los errores y promociona la reutilización del código. Es una manera especial de programar, que se acerca de alguna manera a cómo expresaríamos las cosas en la vida real.\n\n### Programación Funcional\n\nLa programación funcional es un paradigma declarativo. Nos enfocaremos en \"qué\" estamos haciendo y no en \"cómo\" se está haciendo que sería el enfoque imperativo. Esto quiere decir que se expresa nuestra lógica sin describir controles de flujo, ni ciclos ni condicionales.\n\n<img src=\"fig/s01_paradigmas.jpg\" width=\"600\"/>\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"c01_introduccion.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}