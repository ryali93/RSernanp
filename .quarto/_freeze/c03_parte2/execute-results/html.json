{
  "hash": "012b709fc6ca09b6fe9e010ba28650f4",
  "result": {
    "markdown": "# Manipulación de datos con tidyverse\n\n<p style=\"text-align: justify;\">\n\nLa mayoría de los paquetes que aprenderá en este apartado son parte del llamado **tidyverse**. Los paquetes de tidyverse comparten una filosofía común de programación de datos y R, y están diseñados para trabajar juntos de forma natural.\n\n</p>\n\nPuedes instalar tidyverse completo con una sola línea de código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n<p style=\"text-align: justify;\">\n\nEn su propia computadora, escriba esa línea de código en la consola y luego presione Entrar para ejecutarlo. R descargará los paquetes de CRAN y los instalará en su computadora. Si tiene problemas con la instalación, asegúrese de estar conectado a Internet y de que **https://cloud.r-project.org/** no esté bloqueado por su firewall o proxy.\n\n</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n<p style=\"text-align: justify;\">\n\nEsto le indica que tidyverse está cargando los paquetes **ggplot2, tibble, tidyr, readr, purrr y dplyr**. Estos consideran los núcleo del tidyverse porque los usará en casi todos los análisis.\n\n</p>\n\n<p style=\"text-align: justify;\">\n\nLos paquetes del tidyverse cambian con bastante frecuencia. Puede ver si hay actualizaciones disponibles y, opcionalmente, instalarlas, ejecutando **`tidyverse_update()`**.\n\n</p>\n\n<p style=\"text-align: justify;\">\n\nToma nota del mensaje de conflictos que se imprime cuando cargas el tidyverse. Te dice que dplyr sobrescribe algunas funciones en base R. Si desea usar la versión base de estas funciones después de cargar dplyr, deberá usar sus nombres completos: **`stats::filter()`** y **`stats::lag()`**\n\n</p>\n\n## Data Transformation con dplyr\n\n<p style=\"text-align: justify;\">\n\nLa visualización es una herramienta importante para la generación de información, pero es raro que obtenga los datos exactamente en la forma correcta que necesita. A menudo, necesitará crear algunas variables o resúmenes nuevos, o tal vez solo desee cambiar el nombre de las variables o reordenar las observaciones para que sea un poco más fácil trabajar con los datos. Aprenderá a hacer todo eso **(¡y más!)** en este apartado, que le enseñará cómo transformar sus datos utilizando el [**paquete dplyr**](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n\nPara explorar los verbos básicos de manipulación de datos de **dplyr**, usaremos la base de datos de zonas de amortiguamiento. Este marco de datos contiene. Los datos provienen de la [Servicio Nacional de Áreas Naturales Protegidas (SERNANP)]{style=\"color:blue\"}\n\n</p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# datos será un 'data frame'\nz_amortiguamiento<- read.csv(file = 'data/zon_amortiguamiento.csv')\nhead(z_amortiguamiento)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X Codigo                 Area_natur   Periodo                 Base_legal\n1 1   RC04                  Ashaninka 2019-2023   R.P. Nº 239-2012-SERNANP\n2 2   BP03                 de Pui Pui 2019-2023    R.J. Nº 285-2008 INRENA\n3 3   RN12                     Matsés 2023-2027 R.P. Nº 054-2014-SERNANP-J\n4 4   RN10         Allpahuayo Mishana 2022-2026    R.J. Nº 159-2007 INRENA\n5 5   RN06 de Salinas y Aguada Blanca 2016-2020    R.J. Nº 087-2007 INRENA\n6 6   RN02                   de Junín 2008-2012    R.J. Nº 145-2008 INRENA\n  Fecha_lega Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1 2012-12-28       <NA> 1899-12-30 R.P. N° 034-2019-SERNANP 2019-01-29\n2 2008-10-28       <NA> 1899-12-30 R.P. N° 033-2019-SERNANP 2019-01-29\n3 2014-02-27       <NA> 1899-12-30  R.P N° 320-2022-SERNANP 2022-12-29\n4 2007-07-24       <NA> 1899-12-30 R.P. N° 082-2022-SERNANP 2022-03-15\n5 2007-04-26       <NA> 1899-12-30 R.P. N° 257-2016-SERNANP 2016-09-14\n6 2008-06-03       <NA> 1899-12-30                     <NA> 1899-12-30\n  Superficie\n1  325684.03\n2   45367.20\n3  231397.76\n4   65956.53\n5  310242.10\n6  100858.12\n```\n:::\n:::\n\n\n### Dplyr Básico\n\nEn este capítulo, aprenderá las cinco funciones clave de **dplyr** que le permiten resolver la gran mayoría de sus desafíos de manipulación de datos:\n\n-   Elija observaciones por sus valores (**`filter()`**).\n-   Reordenar las filas (**`arrange()`**).\n-   Elija las variables por sus nombres (**`select()`**).\n-   Crear nuevas variables con funciones de variables existentes (**`mutate()`**).\n-   Colapsar muchos valores en un solo resumen (**`summarize()`**)\n\n<p style=\"text-align: justify;\">\n\nTodos estos se pueden usar junto con **`group_by()`**, que cambia el alcance de cada función de operar en todo el conjunto de datos a operar en él grupo por grupo. Estas seis funciones proporcionan los **verbos** para un lenguaje de manipulación de datos.\n\n</p>\n\nTodos los verbos funcionan de manera similar:\n\n1.  El primer argumento es un marco de datos.\n2.  Los argumentos siguientes describen qué hacer con el marco de datos, utilizando los nombres de las variables **(sin comillas)**.\n3.  El resultado es un nuevo dataframe.\n\n<p style=\"text-align: justify;\">\n\nJuntas, estas propiedades hacen que sea fácil encadenar varios pasos simples para lograr un resultado complejo. Profundicemos y veamos cómo funcionan estos verbos.\n\n</p>\n\n### Filtrar filas con filter()\n\n<p align=\"center\">\n\n<img src=\"fig/filter.png\" width=\"500\"/>\n\n</p>\n\n**Filter()**te permite filtrar un subconjunto de observaciones según sus valores. El primer argumento es el nombre del data frame. El segundo y los siguientes argumentos son las expresiones que lo filtran.\n\nPor ejemplo, podemos seleccionar todas las **Superficie igual a 310242.10** con:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(z_amortiguamiento, Superficie == 310242.10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X Codigo                 Area_natur   Periodo              Base_legal\n1 5   RN06 de Salinas y Aguada Blanca 2016-2020 R.J. Nº 087-2007 INRENA\n  Fecha_lega Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1 2007-04-26       <NA> 1899-12-30 R.P. N° 257-2016-SERNANP 2016-09-14\n  Superficie\n1   310242.1\n```\n:::\n:::\n\n\nCuando ejecutas esa línea de código, dplyr ejecuta la operación de filtrado y devuelve un nuevo data frame. Las funciones de dplyr nunca modifican su input, por lo que si deseas guardar el resultado, necesitarás usar el operador de asignación, \\<-:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter01 <- dplyr::filter(z_amortiguamiento,Superficie == 310242.10 )\n```\n:::\n\n\nDe otro modo usar el operador **\"%\\>%\"** de la librería **magrittr**.\n\nR imprime los resultados o los guarda en una variable. Si desea hacer ambas cosas, puede envolver la tarea **entre paréntesis**:\n\n\n::: {.cell}\n\n```{.r .bg-success .cell-code}\n(filter02 <- dplyr::filter(z_amortiguamiento,Superficie == 310242.10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X Codigo                 Area_natur   Periodo              Base_legal\n1 5   RN06 de Salinas y Aguada Blanca 2016-2020 R.J. Nº 087-2007 INRENA\n  Fecha_lega Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1 2007-04-26       <NA> 1899-12-30 R.P. N° 257-2016-SERNANP 2016-09-14\n  Superficie\n1   310242.1\n```\n:::\n:::\n\n\n#### Comparaciones\n\nPara usar el filtrado de manera efectiva, debes saber cómo seleccionar las observaciones que deseas utilizando los operadores de comparación. R proporciona el conjunto estándar: `>`, `>=`, `<`, `<=`, `!=` (no igual) y `==` (igual).\n\nCuando comienzas con R, el error más fácil de cometer es usar `=` en lugar de `==` cuando se busca igualdad. Cuando esto suceda, obtendrás un error informativo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(z_amortiguamiento,Superficie = 310242.10)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `dplyr::filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `Superficie == 310242.1`?\n```\n:::\n:::\n\n\nHay otro problema común que puedes encontrar al usar `==`: los números de coma flotante. **¡Estos resultados pueden sorprenderte!**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(2)^2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1 / 49 * 49 == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nLas computadoras usan **aritmética de precisión finita** (obviamente, **NO** pueden **almacenar** una **cantidad infinita de dígitos**), así que recuerda que cada número que observas es una aproximación. En lugar de confiar en **`==`**, usa **`near()`** (cercano, en inglés):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnear(sqrt(2)^2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nnear(1 / 49 * 49, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n#### Operadores lógicos\n\nSi tienes múltiples argumentos para **`filter()`** estos se combinan con **\"y\"**: cada expresión debe ser verdadera para que una fila se incluya en el output. Para otros tipos de combinaciones necesitarás usar operadores Booleanos: **& es \"y\"**, **\\| es \"o\"**, y **! es \"no\"**. La siguiente figura muestra el conjunto completo de operaciones **Booleanas**.\n\n<p align=\"center\">\n\n<img src=\"https://es.r4ds.hadley.nz/diagrams_w_text_as_path/es/transform-logical.svg\" width=\"500\"/>\n\n</p>\n\nEl siguiente código sirve para encontrar todas las areas iguales a `310242.10` o `1880.50`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(z_amortiguamiento,Superficie == 310242.10 | Superficie == 1880.50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   X Codigo                 Area_natur   Periodo               Base_legal\n1  5   RN06 de Salinas y Aguada Blanca 2016-2020  R.J. Nº 087-2007 INRENA\n2 52   SN03           Lagunas de Mejía 2015-2019 R.P. Nº 238-2015-SERNANP\n  Fecha_lega Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1 2007-04-26       <NA> 1899-12-30 R.P. N° 257-2016-SERNANP 2016-09-14\n2 2015-10-29       <NA> 1899-12-30 R.P. N° 144-2020-SERNANP 2020-09-17\n  Superficie\n1   310242.1\n2     1880.5\n```\n:::\n:::\n\n\nEl orden de las operaciones no funciona como en español. No puedes escribir **`filter(z_amortiguamiento, Superficie == (310242.10 | 1880.50))`**, que literalmente puede traducirse como **\"encuentra todas las areas de 310242.10 o 1880.50\"**. En cambio, encontrará todos los areas que son iguales a **310242.10 \\| 1880.50**, una expresión que resulta en **'TRUE'** (verdadero). En un contexto numérico (como aquí), **'TRUE' se convierte en uno**, por lo que **encuentra** todos las **areas de 310242.10**, **NO** en **310242.10 o 1880.50**. ¡Esto es bastante confuso!\n\nUna manera rápida y útil para resolver este problema es **`x %in% y`** (es decir, x en y). Esto **seleccionará cada fila donde x es uno de los valores en y**. Podríamos usarlo para reescribir el código de arriba:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(z_amortiguamiento, Superficie %in% c(310242.10, 1880.50))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   X Codigo                 Area_natur   Periodo               Base_legal\n1  5   RN06 de Salinas y Aguada Blanca 2016-2020  R.J. Nº 087-2007 INRENA\n2 52   SN03           Lagunas de Mejía 2015-2019 R.P. Nº 238-2015-SERNANP\n  Fecha_lega Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1 2007-04-26       <NA> 1899-12-30 R.P. N° 257-2016-SERNANP 2016-09-14\n2 2015-10-29       <NA> 1899-12-30 R.P. N° 144-2020-SERNANP 2020-09-17\n  Superficie\n1   310242.1\n2     1880.5\n```\n:::\n:::\n\n\nA veces puedes simplificar subconjuntos complicados al recordar **la ley de De Morgan**: **!(x & y)** es lo mismo que **!x \\| !y**, y **!(x \\| y)** es lo mismo que \\*\\*!x & !y\\*. Por ejemplo, si deseas encontrar areas mayores a `26.2` y menores `8652.24` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(z_amortiguamiento,!(Superficie > 8652.24  | Superficie < 26.2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Codigo                Area_natur   Periodo               Base_legal\n1   9   SH02   de la Pampa de Ayacucho 2016-2020 R.P. N° 019-2016-SERNANP\n2  10   SH01             de Chacamarca 2002-2007  R.J. Nº 466-2002-INRENA\n3  13   SN04                  de Ampay 2015-2019 R.P. Nº 168-2015-SERNANP\n4  14   SN01               de Huayllay 2018-2022  R.J. Nº 325-2001 INRENA\n5  21   PN05         Cerros de Amotape 2012-2017 R.P. N° 039-2012-SERNANP\n6  36   SN05   los Manglares de Tumbes 2023-2027 R.P. N° 063-2017-SERNANP\n7  37   RC05               Machiguenga 2023-2027 R.P. N° 065-2017-SERNANP\n8  39   SN07             Pampa Hermosa 2022-2027 R.P. Nº 213-2012-SERNANP\n9  40  RVS01                Laquipampa 2015-2019 R.P. Nº 014-2015-SERNANP\n10 41  RVS02     Los Pantanos de Villa 2016-2020  R.J. Nº 358-2001-INRENA\n11 44   ZR01              Chancaybaños      <NA>  R.J. Nº 337-2001-INRENA\n12 46   RC08                Chayu Naín      <NA> R.P. Nº 026-2011-SERNANP\n13 47   RC08                Chayu Naín      <NA> R.P. Nº 026-2011-SERNANP\n14 48  RVS03 Bosques Nublados de Udima 2015-2019 R.P. Nº 052-2015-SERNANP\n15 49  RVS03 Bosques Nublados de Udima 2015-2019 R.P. Nº 052-2015-SERNANP\n16 50  RVS03 Bosques Nublados de Udima 2015-2019 R.P. Nº 052-2015-SERNANP\n17 52   SN03          Lagunas de Mejía 2015-2019 R.P. Nº 238-2015-SERNANP\n18 53   BP05             de Pagaibamba 2017-2021  R.J. Nº 306-2001-INRENA\n19 56   PN02            de Tingo María 2022-2026 R.P. N° 090-2017-SERNANP\n20 59   RN04                 de Lachay 2019-2023 R.P. Nº 090-2013-SERNANP\n21 79   RC10                   Huimeki 2023-2027  R.P N° 080-2023-SERNANP\n   Fecha_lega   Base_leg00 Fecha_le00               Base_leg01 Fecha_le01\n1  2016-01-29         <NA> 1899-12-30                     <NA> 1899-12-30\n2  2002-12-20         <NA> 1899-12-30                     <NA> 1899-12-30\n3  2014-12-22         <NA> 1899-12-30 R.P. Nº 012-2022-SERNANP 2022-01-13\n4  2001-12-13         <NA> 1899-12-30 R.P. N° 268-2018-SERNANP 2018-11-05\n5  2012-02-17 Ley N° 30359 2015-11-11                     <NA> 1899-12-30\n6  2017-02-28         <NA> 1899-12-30 R.P. N° 064-2023-SERNANP 2023-02-17\n7  2017-02-28         <NA> 1899-12-30 R.P. N° 339-2022-SERNANP 2022-12-29\n8  2012-12-28         <NA> 1899-12-30 R.P. Nº 184-2022-SERNANP 2022-08-04\n9  2015-01-27         <NA> 1899-12-30                     <NA> 1899-12-30\n10 2001-12-28         <NA> 1899-12-30 R.P. N° 169-2016-SERNANP 2016-08-05\n11 2001-12-26         <NA> 1899-12-30                     <NA> 1899-12-30\n12 2011-02-18         <NA> 1899-12-30                     <NA> 1899-12-30\n13 2011-02-18         <NA> 1899-12-30                     <NA> 1899-12-30\n14 2015-03-16         <NA> 1899-12-30                     <NA> 1899-12-30\n15 2015-03-16         <NA> 1899-12-30                     <NA> 1899-12-30\n16 2015-03-16         <NA> 1899-12-30                     <NA> 1899-12-30\n17 2015-10-29         <NA> 1899-12-30 R.P. N° 144-2020-SERNANP 2020-09-17\n18 2001-12-13         <NA> 1899-12-30 R.P. N° 130-2017-SERNANP 2017-05-22\n19 2017-03-31         <NA> 1899-12-30 R.P. Nº 027-2022-SERNANP 2022-01-20\n20 2013-05-30         <NA> 1899-12-30 R.P. N° 071-2019-SERNANP 2019-03-10\n21 2023-03-01         <NA> 1899-12-30                     <NA> 1899-12-30\n   Superficie\n1      429.19\n2     1332.28\n3     5702.07\n4     4843.62\n5     3492.40\n6     5208.08\n7     6371.03\n8     8652.24\n9     4622.00\n10    1047.22\n11    4045.57\n12    8236.84\n13    4153.80\n14    2994.30\n15      26.25\n16    1002.71\n17    1880.50\n18    4100.13\n19    4125.72\n20    3354.05\n21    5499.98\n```\n:::\n:::\n\n\n### Reordenar las filas con arrange()\n\n**`arrange()** funciona de manera similar a`filter()\\` excepto que en lugar de seleccionar filas, cambia su orden. La función toma un** dataframe\\*\\* y un conjunto de nombres de columnas (o expresiones más complicadas) para ordenar según ellas. Si proporcionas más de un nombre de columna, cada columna adicional se utilizará para romper empates en los valores de las columnas anteriores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(z_amortiguamiento, Codigo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Codigo                          Area_natur   Periodo\n1   2   BP03                          de Pui Pui 2019-2023\n2  75   BP04               San Matias-San Carlos 2023-2027\n3  53   BP05                       de Pagaibamba 2017-2021\n4  77   BP06                           Alto Mayo 2023-2027\n5  57   CC01                           El Angolo 2019-2023\n6  29   CC02                         Sunchubamba      <NA>\n7  26   PN01                          de Cutervo 2017-2021\n8  56   PN02                      de Tingo María 2022-2026\n9  24   PN03                            del Manu 2019-2023\n10 25   PN03                            del Manu 2019-2023\n11 23   PN04                           Huascarán 2017-2021\n12 20   PN05                   Cerros de Amotape 2012-2017\n13 21   PN05                   Cerros de Amotape 2012-2017\n14 22   PN05                   Cerros de Amotape 2012-2017\n15 30   PN06                      del Río Abiseo 2014-2019\n16 71   PN07                 Yanachaga-Chemillén 2022-2026\n17 19   PN08                      Bahuaja-Sonene 2015-2019\n18 18   PN09                     Cordillera Azul 2017-2021\n19 65   PN10                              Otishi 2016-2020\n20 66   PN11                          Alto Purús 2019-2023\n21 67   PN11                          Alto Purús 2019-2023\n22 68   PN11                          Alto Purús 2019-2023\n23 27   PN12 Ichigkat Muja-Cordillera del Cóndor 2019-2023\n24 15   PN14                  Sierra del Divisor 2023-2027\n25 16   PN14                  Sierra del Divisor 2023-2027\n26 17   PN14                  Sierra del Divisor 2023-2027\n27 70   PN15                              Yaguas 2021-2025\n28 76   RC01                             Yanesha 2017-2021\n29 51   RC02                             El Sira 2015-2019\n30 34   RC03                          Amarakaeri 2016-2020\n31  1   RC04                           Ashaninka 2019-2023\n32 35   RC05                         Machiguenga 2023-2027\n33 37   RC05                         Machiguenga 2023-2027\n34 38   RC05                         Machiguenga 2023-2027\n35 58   RC06                               Purús 2019-2023\n36 45   RC07                           Tuntanain 2016-2020\n37 46   RC08                          Chayu Naín      <NA>\n38 47   RC08                          Chayu Naín      <NA>\n39 74   RC09                            Airo Pai 2022-2026\n40 79   RC10                             Huimeki 2023-2027\n41 80   RC10                             Huimeki 2023-2027\n42  7   RN01    Pampa Galeras Barbara D' Achille 2022-2026\n43  6   RN02                            de Junín 2008-2012\n44 43   RN03                          de Paracas 2016-2020\n45 59   RN04                           de Lachay 2019-2023\n46 69   RN05                        del Titicaca 2021-2025\n47  5   RN06          de Salinas y Aguada Blanca 2016-2020\n48 54   RN07                          de Calipuy 2015-2019\n49 42   RN08                      Pacaya-Samiria 2017-2021\n50 62   RN09                           Tambopata 2019-2023\n51 63   RN09                           Tambopata 2019-2023\n52 64   RN09                           Tambopata 2019-2023\n53  4   RN10                  Allpahuayo Mishana 2022-2026\n54  3   RN12                              Matsés 2023-2027\n55 28   RN14                            Pucacuro 2019-2023\n56 61   RN15                        San Fernando 2019-2024\n57 78   RP01                   Nor Yauyos-Cochas 2022-2027\n58 60   RP02             Subcuenca del Cotahuasi 2019-2023\n59 40  RVS01                          Laquipampa 2015-2019\n60 41  RVS02               Los Pantanos de Villa 2016-2020\n61 48  RVS03           Bosques Nublados de Udima 2015-2019\n62 49  RVS03           Bosques Nublados de Udima 2015-2019\n63 50  RVS03           Bosques Nublados de Udima 2015-2019\n64 10   SH01                       de Chacamarca 2002-2007\n65  9   SH02             de la Pampa de Ayacucho 2016-2020\n66 33   SH03                         Machupicchu 2015-2019\n67  8   SH04                     Bosque de Pomac 2017-2021\n68 14   SN01                         de Huayllay 2018-2022\n69 55   SN02                          de Calipuy 2015-2019\n70 52   SN03                    Lagunas de Mejía 2015-2019\n71 13   SN04                            de Ampay 2015-2019\n72 36   SN05             los Manglares de Tumbes 2023-2027\n73 72   SN06                           Megantoni 2022-2026\n74 73   SN06                           Megantoni 2022-2026\n75 39   SN07                       Pampa Hermosa 2022-2027\n76 12   SN08                  Tabaconas-Namballe 2023-2027\n77 11   SN09                 Cordillera de Colán 2016-2020\n78 44   ZR01                        Chancaybaños      <NA>\n79 31   ZR03                    Santiago Comaina      <NA>\n80 32   ZR03                    Santiago Comaina      <NA>\n                   Base_legal Fecha_lega               Base_leg00 Fecha_le00\n1     R.J. Nº 285-2008 INRENA 2008-10-28                     <NA> 1899-12-30\n2    R.P. N° 268-2015-SERNANP 2015-11-27                     <NA> 1899-12-30\n3     R.J. Nº 306-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n4    R.P. Nº 069-2023-SERNANP 2023-02-27                     <NA> 1899-12-30\n5    R.P. N° 212-2012-SERNANP 2012-11-28                     <NA> 1899-12-30\n6     R.J. Nº 303-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n7    R.P. Nº 175-2009-SERNANP 2009-09-24                     <NA> 1899-12-30\n8    R.P. N° 090-2017-SERNANP 2017-03-31                     <NA> 1899-12-30\n9    R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n10   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n11   R.P. Nº 241-2010-SERNANP 2010-12-30                     <NA> 1899-12-30\n12   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n13   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n14   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n15   R.J. Nº 253 -2006 INRENA 2006-09-27                     <NA> 1899-12-30\n16   R.P. N° 011-2022-SERNANP 2022-01-13                     <NA> 1899-12-30\n17   R.P. Nº 111-2015-SERNANP 2015-06-10                     <NA> 1899-12-30\n18   R.P. Nº 064-2011-SERNANP 2011-04-14                     <NA> 1899-12-30\n19   R.P. N° 290-2016-SERNANP 2016-10-31                     <NA> 1899-12-30\n20   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n21   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n22   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n23    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n24   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n25   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n26   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n27   R.P. Nº 085-2021-SERNANP 2021-04-23                     <NA> 1899-12-30\n28   R.J. Nº 129-2011-SERNANP 2011-07-01                     <NA> 1899-12-30\n29   R.P. Nº 044-2009 SERNANP 2009-02-27                     <NA> 1899-12-30\n30   R.P. N° 198-2016-SERNANP 2016-07-26                     <NA> 1899-12-30\n31   R.P. Nº 239-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n32   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n33   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n34   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n35   R.P. Nº 003-2013-SERNANP 1899-12-30                     <NA> 1899-12-30\n36    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n37   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n38   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n39   R.P. N° 058-2022-SERNANP 2022-02-16                     <NA> 1899-12-30\n40    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n41    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n42    R.J. Nº 331-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n43    R.J. Nº 145-2008 INRENA 2008-06-03                     <NA> 1899-12-30\n44   R.P. Nº 020-2016 SERNANP 2016-01-29                     <NA> 1899-12-30\n45   R.P. Nº 090-2013-SERNANP 2013-05-30                     <NA> 1899-12-30\n46   R.P. N° 038-2021-SERNANP 2021-02-12                     <NA> 1899-12-30\n47    R.J. Nº 087-2007 INRENA 2007-04-26                     <NA> 1899-12-30\n48   R.P. Nº 032-2015-SERNANP 2015-02-18                     <NA> 1899-12-30\n49   R.J. Nº 173-2009 SERNANP 2009-09-24                     <NA> 1899-12-30\n50    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n51    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n52    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n53    R.J. Nº 159-2007 INRENA 2007-07-24                     <NA> 1899-12-30\n54 R.P. Nº 054-2014-SERNANP-J 2014-02-27                     <NA> 1899-12-30\n55   R.P. Nº 047-2013-SERNANP 2013-03-20                     <NA> 1899-12-30\n56   R.P. Nº 118-2015-SERNANP 2015-06-19                     <NA> 1899-12-30\n57    R.J. Nº 194-2006 INRENA 2006-07-20                     <NA> 1899-12-30\n58   R.P. Nº 163-2009 SERNANP 2009-09-15                     <NA> 1899-12-30\n59   R.P. Nº 014-2015-SERNANP 2015-01-27                     <NA> 1899-12-30\n60    R.J. Nº 358-2001-INRENA 2001-12-28                     <NA> 1899-12-30\n61   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n62   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n63   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n64    R.J. Nº 466-2002-INRENA 2002-12-20                     <NA> 1899-12-30\n65   R.P. N° 019-2016-SERNANP 2016-01-29                     <NA> 1899-12-30\n66   R.P. Nº 070-2015-SERNANP 2015-04-17                     <NA> 1899-12-30\n67   R.P. Nº 006-2011-SERNANP 2011-01-19                     <NA> 1899-12-30\n68    R.J. Nº 325-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n69   R.P. Nº 021-2015-SERNANP 2015-02-10                     <NA> 1899-12-30\n70   R.P. Nº 238-2015-SERNANP 2015-10-29                     <NA> 1899-12-30\n71   R.P. Nº 168-2015-SERNANP 2014-12-22                     <NA> 1899-12-30\n72   R.P. N° 063-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n73   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n74   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n75   R.P. Nº 213-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n76    R.J. Nº 015-2007 INRENA 2007-01-22                     <NA> 1899-12-30\n77   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n78    R.J. Nº 337-2001-INRENA 2001-12-26                     <NA> 1899-12-30\n79    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n80    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n                   Base_leg01 Fecha_le01 Superficie\n1    R.P. N° 033-2019-SERNANP 2019-01-29   45367.20\n2    R.P. N° 332-2022-SERNANP 2022-12-29  128479.57\n3    R.P. N° 130-2017-SERNANP 2017-05-22    4100.13\n4                        <NA> 1899-12-30  222953.88\n5    R.P. N° 336-2018-SERNANP 2018-12-31   29583.14\n6                        <NA> 1899-12-30   28404.36\n7    R.P. N° 031-2017-SERNANP 2017-01-31   19009.20\n8    R.P. Nº 027-2022-SERNANP 2022-01-20    4125.72\n9    R.P. N° 337-2018-SERNANP 2018-12-31  392819.65\n10   R.P. N° 337-2018-SERNANP 2018-12-31  273370.45\n11    R.P. N° 64-2017-SERNANP 2017-02-28  178434.11\n12                       <NA> 1899-12-30   66699.00\n13                       <NA> 1899-12-30    3492.40\n14                       <NA> 1899-12-30   21614.02\n15    R.P. N° 73-2014-SERNANP 2014-03-25  671363.75\n16                       <NA> 1899-12-30   60785.61\n17                       <NA> 1899-12-30  261127.28\n18   R.P. N° 032-2017-SERNANP 2017-01-31 2304596.68\n19                       <NA> 1899-12-30   38887.63\n20   R.P. N° 087-2019-SERNANP 2019-04-04  632382.65\n21   R.P. N° 087-2019-SERNANP 2019-04-04  867663.35\n22   R.P. N° 087-2019-SERNANP 2019-04-04  202033.34\n23   R.P. N° 338-2018-SERNANP 2018-12-31  138965.15\n24   R.P. N° 043-2023-SERNANP 2023-02-01  362286.24\n25   R.P. N° 043-2023-SERNANP 2023-02-01  260177.68\n26   R.P. N° 043-2023-SERNANP 2023-02-01    9106.53\n27                       <NA> 1899-12-30  241073.13\n28   R.P. N° 346-2016-SERNANP 2016-12-29   51379.07\n29   R.P. N° 134-2015-SERNANP 2015-07-09 1095646.64\n30                       <NA> 1899-12-30  283545.59\n31   R.P. N° 034-2019-SERNANP 2019-01-29  325684.03\n32   R.P. N° 339-2022-SERNANP 2022-12-29  316383.50\n33   R.P. N° 339-2022-SERNANP 2022-12-29    6371.03\n34   R.P. N° 339-2022-SERNANP 2022-12-29  197205.13\n35   R.P. N° 062-2019-SERNANP 2019-02-25  222423.17\n36   R.P. N° 139-2016-SERNANP 2016-06-06  288188.56\n37                       <NA> 1899-12-30    8236.84\n38                       <NA> 1899-12-30    4153.80\n39                       <NA> 1899-12-30   62423.85\n40                       <NA> 1899-12-30    5499.98\n41                       <NA> 1899-12-30   16655.73\n42 R.P. N° 069-2022-SERNANP\\n 2022-03-02   14530.51\n43                       <NA> 1899-12-30  100858.12\n44                       <NA> 1899-12-30  140885.51\n45   R.P. N° 071-2019-SERNANP 2019-03-10    3354.05\n46                       <NA> 1899-12-30  164565.27\n47   R.P. N° 257-2016-SERNANP 2016-09-14  310242.10\n48                       <NA> 1899-12-30   36660.57\n49   R.P. N° 273-2017-SERNANP 2017-11-30 1219807.51\n50   R.P. N° 035-2019-SERNANP 2019-01-29   15650.38\n51   R.P. N° 035-2019-SERNANP 2019-01-29   22027.06\n52   R.P. N° 035-2019-SERNANP 2019-01-29  193877.91\n53   R.P. N° 082-2022-SERNANP 2022-03-15   65956.53\n54    R.P N° 320-2022-SERNANP 2022-12-29  231397.76\n55   R.P. N° 339-2018-SERNANP 2018-12-31  339499.85\n56   R.P. Nº 239-2019-SERNANP 2019-10-11   73256.14\n57   R.P. N° 264-2022-SERNANP 2022-11-15  109438.36\n58   R.P. N° 079-2019-SERNANP 2019-03-14  485112.73\n59                       <NA> 1899-12-30    4622.00\n60   R.P. N° 169-2016-SERNANP 2016-08-05    1047.22\n61                       <NA> 1899-12-30    2994.30\n62                       <NA> 1899-12-30      26.25\n63                       <NA> 1899-12-30    1002.71\n64                       <NA> 1899-12-30    1332.28\n65                       <NA> 1899-12-30     429.19\n66                       <NA> 1899-12-30  133083.09\n67    R.P. N° 91-2017-SERNANP 2017-03-31    9291.39\n68   R.P. N° 268-2018-SERNANP 2018-11-05    4843.62\n69                       <NA> 1899-12-30   10506.92\n70   R.P. N° 144-2020-SERNANP 2020-09-17    1880.50\n71   R.P. Nº 012-2022-SERNANP 2022-01-13    5702.07\n72   R.P. N° 064-2023-SERNANP 2023-02-17    5208.08\n73                       <NA> 1899-12-30  128192.77\n74                       <NA> 1899-12-30   77891.55\n75   R.P. Nº 184-2022-SERNANP 2022-08-04    8652.24\n76   R.P. N° 338-2022-SERNANP 2022-12-29   44993.90\n77   R.P. N° 140-2016-SERNANP 2016-06-06   18866.71\n78                       <NA> 1899-12-30    4045.57\n79                       <NA> 1899-12-30  117141.77\n80                       <NA> 1899-12-30   87651.54\n```\n:::\n:::\n\n\nUsa **`desc()`** para reordenar por una columna en orden descendente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(z_amortiguamiento, desc(Superficie))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Codigo                          Area_natur   Periodo\n1  18   PN09                     Cordillera Azul 2017-2021\n2  42   RN08                      Pacaya-Samiria 2017-2021\n3  51   RC02                             El Sira 2015-2019\n4  67   PN11                          Alto Purús 2019-2023\n5  30   PN06                      del Río Abiseo 2014-2019\n6  66   PN11                          Alto Purús 2019-2023\n7  60   RP02             Subcuenca del Cotahuasi 2019-2023\n8  24   PN03                            del Manu 2019-2023\n9  15   PN14                  Sierra del Divisor 2023-2027\n10 28   RN14                            Pucacuro 2019-2023\n11  1   RC04                           Ashaninka 2019-2023\n12 35   RC05                         Machiguenga 2023-2027\n13  5   RN06          de Salinas y Aguada Blanca 2016-2020\n14 45   RC07                           Tuntanain 2016-2020\n15 34   RC03                          Amarakaeri 2016-2020\n16 25   PN03                            del Manu 2019-2023\n17 19   PN08                      Bahuaja-Sonene 2015-2019\n18 16   PN14                  Sierra del Divisor 2023-2027\n19 70   PN15                              Yaguas 2021-2025\n20  3   RN12                              Matsés 2023-2027\n21 77   BP06                           Alto Mayo 2023-2027\n22 58   RC06                               Purús 2019-2023\n23 68   PN11                          Alto Purús 2019-2023\n24 38   RC05                         Machiguenga 2023-2027\n25 64   RN09                           Tambopata 2019-2023\n26 23   PN04                           Huascarán 2017-2021\n27 69   RN05                        del Titicaca 2021-2025\n28 43   RN03                          de Paracas 2016-2020\n29 27   PN12 Ichigkat Muja-Cordillera del Cóndor 2019-2023\n30 33   SH03                         Machupicchu 2015-2019\n31 75   BP04               San Matias-San Carlos 2023-2027\n32 72   SN06                           Megantoni 2022-2026\n33 31   ZR03                    Santiago Comaina      <NA>\n34 78   RP01                   Nor Yauyos-Cochas 2022-2027\n35  6   RN02                            de Junín 2008-2012\n36 32   ZR03                    Santiago Comaina      <NA>\n37 73   SN06                           Megantoni 2022-2026\n38 61   RN15                        San Fernando 2019-2024\n39 20   PN05                   Cerros de Amotape 2012-2017\n40  4   RN10                  Allpahuayo Mishana 2022-2026\n41 74   RC09                            Airo Pai 2022-2026\n42 71   PN07                 Yanachaga-Chemillén 2022-2026\n43 76   RC01                             Yanesha 2017-2021\n44  2   BP03                          de Pui Pui 2019-2023\n45 12   SN08                  Tabaconas-Namballe 2023-2027\n46 65   PN10                              Otishi 2016-2020\n47 54   RN07                          de Calipuy 2015-2019\n48 57   CC01                           El Angolo 2019-2023\n49 29   CC02                         Sunchubamba      <NA>\n50 63   RN09                           Tambopata 2019-2023\n51 22   PN05                   Cerros de Amotape 2012-2017\n52 26   PN01                          de Cutervo 2017-2021\n53 11   SN09                 Cordillera de Colán 2016-2020\n54 80   RC10                             Huimeki 2023-2027\n55 62   RN09                           Tambopata 2019-2023\n56  7   RN01    Pampa Galeras Barbara D' Achille 2022-2026\n57 55   SN02                          de Calipuy 2015-2019\n58  8   SH04                     Bosque de Pomac 2017-2021\n59 17   PN14                  Sierra del Divisor 2023-2027\n60 39   SN07                       Pampa Hermosa 2022-2027\n61 46   RC08                          Chayu Naín      <NA>\n62 37   RC05                         Machiguenga 2023-2027\n63 13   SN04                            de Ampay 2015-2019\n64 79   RC10                             Huimeki 2023-2027\n65 36   SN05             los Manglares de Tumbes 2023-2027\n66 14   SN01                         de Huayllay 2018-2022\n67 40  RVS01                          Laquipampa 2015-2019\n68 47   RC08                          Chayu Naín      <NA>\n69 56   PN02                      de Tingo María 2022-2026\n70 53   BP05                       de Pagaibamba 2017-2021\n71 44   ZR01                        Chancaybaños      <NA>\n72 21   PN05                   Cerros de Amotape 2012-2017\n73 59   RN04                           de Lachay 2019-2023\n74 48  RVS03           Bosques Nublados de Udima 2015-2019\n75 52   SN03                    Lagunas de Mejía 2015-2019\n76 10   SH01                       de Chacamarca 2002-2007\n77 41  RVS02               Los Pantanos de Villa 2016-2020\n78 50  RVS03           Bosques Nublados de Udima 2015-2019\n79  9   SH02             de la Pampa de Ayacucho 2016-2020\n80 49  RVS03           Bosques Nublados de Udima 2015-2019\n                   Base_legal Fecha_lega               Base_leg00 Fecha_le00\n1    R.P. Nº 064-2011-SERNANP 2011-04-14                     <NA> 1899-12-30\n2    R.J. Nº 173-2009 SERNANP 2009-09-24                     <NA> 1899-12-30\n3    R.P. Nº 044-2009 SERNANP 2009-02-27                     <NA> 1899-12-30\n4    R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n5    R.J. Nº 253 -2006 INRENA 2006-09-27                     <NA> 1899-12-30\n6    R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n7    R.P. Nº 163-2009 SERNANP 2009-09-15                     <NA> 1899-12-30\n8    R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n9    R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n10   R.P. Nº 047-2013-SERNANP 2013-03-20                     <NA> 1899-12-30\n11   R.P. Nº 239-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n12   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n13    R.J. Nº 087-2007 INRENA 2007-04-26                     <NA> 1899-12-30\n14    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n15   R.P. N° 198-2016-SERNANP 2016-07-26                     <NA> 1899-12-30\n16   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n17   R.P. Nº 111-2015-SERNANP 2015-06-10                     <NA> 1899-12-30\n18   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n19   R.P. Nº 085-2021-SERNANP 2021-04-23                     <NA> 1899-12-30\n20 R.P. Nº 054-2014-SERNANP-J 2014-02-27                     <NA> 1899-12-30\n21   R.P. Nº 069-2023-SERNANP 2023-02-27                     <NA> 1899-12-30\n22   R.P. Nº 003-2013-SERNANP 1899-12-30                     <NA> 1899-12-30\n23   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n24   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n25    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n26   R.P. Nº 241-2010-SERNANP 2010-12-30                     <NA> 1899-12-30\n27   R.P. N° 038-2021-SERNANP 2021-02-12                     <NA> 1899-12-30\n28   R.P. Nº 020-2016 SERNANP 2016-01-29                     <NA> 1899-12-30\n29    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n30   R.P. Nº 070-2015-SERNANP 2015-04-17                     <NA> 1899-12-30\n31   R.P. N° 268-2015-SERNANP 2015-11-27                     <NA> 1899-12-30\n32   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n33    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n34    R.J. Nº 194-2006 INRENA 2006-07-20                     <NA> 1899-12-30\n35    R.J. Nº 145-2008 INRENA 2008-06-03                     <NA> 1899-12-30\n36    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n37   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n38   R.P. Nº 118-2015-SERNANP 2015-06-19                     <NA> 1899-12-30\n39   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n40    R.J. Nº 159-2007 INRENA 2007-07-24                     <NA> 1899-12-30\n41   R.P. N° 058-2022-SERNANP 2022-02-16                     <NA> 1899-12-30\n42   R.P. N° 011-2022-SERNANP 2022-01-13                     <NA> 1899-12-30\n43   R.J. Nº 129-2011-SERNANP 2011-07-01                     <NA> 1899-12-30\n44    R.J. Nº 285-2008 INRENA 2008-10-28                     <NA> 1899-12-30\n45    R.J. Nº 015-2007 INRENA 2007-01-22                     <NA> 1899-12-30\n46   R.P. N° 290-2016-SERNANP 2016-10-31                     <NA> 1899-12-30\n47   R.P. Nº 032-2015-SERNANP 2015-02-18                     <NA> 1899-12-30\n48   R.P. N° 212-2012-SERNANP 2012-11-28                     <NA> 1899-12-30\n49    R.J. Nº 303-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n50    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n51   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n52   R.P. Nº 175-2009-SERNANP 2009-09-24                     <NA> 1899-12-30\n53   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n54    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n55    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n56    R.J. Nº 331-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n57   R.P. Nº 021-2015-SERNANP 2015-02-10                     <NA> 1899-12-30\n58   R.P. Nº 006-2011-SERNANP 2011-01-19                     <NA> 1899-12-30\n59   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n60   R.P. Nº 213-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n61   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n62   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n63   R.P. Nº 168-2015-SERNANP 2014-12-22                     <NA> 1899-12-30\n64    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n65   R.P. N° 063-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n66    R.J. Nº 325-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n67   R.P. Nº 014-2015-SERNANP 2015-01-27                     <NA> 1899-12-30\n68   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n69   R.P. N° 090-2017-SERNANP 2017-03-31                     <NA> 1899-12-30\n70    R.J. Nº 306-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n71    R.J. Nº 337-2001-INRENA 2001-12-26                     <NA> 1899-12-30\n72   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n73   R.P. Nº 090-2013-SERNANP 2013-05-30                     <NA> 1899-12-30\n74   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n75   R.P. Nº 238-2015-SERNANP 2015-10-29                     <NA> 1899-12-30\n76    R.J. Nº 466-2002-INRENA 2002-12-20                     <NA> 1899-12-30\n77    R.J. Nº 358-2001-INRENA 2001-12-28                     <NA> 1899-12-30\n78   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n79   R.P. N° 019-2016-SERNANP 2016-01-29                     <NA> 1899-12-30\n80   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n                   Base_leg01 Fecha_le01 Superficie\n1    R.P. N° 032-2017-SERNANP 2017-01-31 2304596.68\n2    R.P. N° 273-2017-SERNANP 2017-11-30 1219807.51\n3    R.P. N° 134-2015-SERNANP 2015-07-09 1095646.64\n4    R.P. N° 087-2019-SERNANP 2019-04-04  867663.35\n5     R.P. N° 73-2014-SERNANP 2014-03-25  671363.75\n6    R.P. N° 087-2019-SERNANP 2019-04-04  632382.65\n7    R.P. N° 079-2019-SERNANP 2019-03-14  485112.73\n8    R.P. N° 337-2018-SERNANP 2018-12-31  392819.65\n9    R.P. N° 043-2023-SERNANP 2023-02-01  362286.24\n10   R.P. N° 339-2018-SERNANP 2018-12-31  339499.85\n11   R.P. N° 034-2019-SERNANP 2019-01-29  325684.03\n12   R.P. N° 339-2022-SERNANP 2022-12-29  316383.50\n13   R.P. N° 257-2016-SERNANP 2016-09-14  310242.10\n14   R.P. N° 139-2016-SERNANP 2016-06-06  288188.56\n15                       <NA> 1899-12-30  283545.59\n16   R.P. N° 337-2018-SERNANP 2018-12-31  273370.45\n17                       <NA> 1899-12-30  261127.28\n18   R.P. N° 043-2023-SERNANP 2023-02-01  260177.68\n19                       <NA> 1899-12-30  241073.13\n20    R.P N° 320-2022-SERNANP 2022-12-29  231397.76\n21                       <NA> 1899-12-30  222953.88\n22   R.P. N° 062-2019-SERNANP 2019-02-25  222423.17\n23   R.P. N° 087-2019-SERNANP 2019-04-04  202033.34\n24   R.P. N° 339-2022-SERNANP 2022-12-29  197205.13\n25   R.P. N° 035-2019-SERNANP 2019-01-29  193877.91\n26    R.P. N° 64-2017-SERNANP 2017-02-28  178434.11\n27                       <NA> 1899-12-30  164565.27\n28                       <NA> 1899-12-30  140885.51\n29   R.P. N° 338-2018-SERNANP 2018-12-31  138965.15\n30                       <NA> 1899-12-30  133083.09\n31   R.P. N° 332-2022-SERNANP 2022-12-29  128479.57\n32                       <NA> 1899-12-30  128192.77\n33                       <NA> 1899-12-30  117141.77\n34   R.P. N° 264-2022-SERNANP 2022-11-15  109438.36\n35                       <NA> 1899-12-30  100858.12\n36                       <NA> 1899-12-30   87651.54\n37                       <NA> 1899-12-30   77891.55\n38   R.P. Nº 239-2019-SERNANP 2019-10-11   73256.14\n39                       <NA> 1899-12-30   66699.00\n40   R.P. N° 082-2022-SERNANP 2022-03-15   65956.53\n41                       <NA> 1899-12-30   62423.85\n42                       <NA> 1899-12-30   60785.61\n43   R.P. N° 346-2016-SERNANP 2016-12-29   51379.07\n44   R.P. N° 033-2019-SERNANP 2019-01-29   45367.20\n45   R.P. N° 338-2022-SERNANP 2022-12-29   44993.90\n46                       <NA> 1899-12-30   38887.63\n47                       <NA> 1899-12-30   36660.57\n48   R.P. N° 336-2018-SERNANP 2018-12-31   29583.14\n49                       <NA> 1899-12-30   28404.36\n50   R.P. N° 035-2019-SERNANP 2019-01-29   22027.06\n51                       <NA> 1899-12-30   21614.02\n52   R.P. N° 031-2017-SERNANP 2017-01-31   19009.20\n53   R.P. N° 140-2016-SERNANP 2016-06-06   18866.71\n54                       <NA> 1899-12-30   16655.73\n55   R.P. N° 035-2019-SERNANP 2019-01-29   15650.38\n56 R.P. N° 069-2022-SERNANP\\n 2022-03-02   14530.51\n57                       <NA> 1899-12-30   10506.92\n58    R.P. N° 91-2017-SERNANP 2017-03-31    9291.39\n59   R.P. N° 043-2023-SERNANP 2023-02-01    9106.53\n60   R.P. Nº 184-2022-SERNANP 2022-08-04    8652.24\n61                       <NA> 1899-12-30    8236.84\n62   R.P. N° 339-2022-SERNANP 2022-12-29    6371.03\n63   R.P. Nº 012-2022-SERNANP 2022-01-13    5702.07\n64                       <NA> 1899-12-30    5499.98\n65   R.P. N° 064-2023-SERNANP 2023-02-17    5208.08\n66   R.P. N° 268-2018-SERNANP 2018-11-05    4843.62\n67                       <NA> 1899-12-30    4622.00\n68                       <NA> 1899-12-30    4153.80\n69   R.P. Nº 027-2022-SERNANP 2022-01-20    4125.72\n70   R.P. N° 130-2017-SERNANP 2017-05-22    4100.13\n71                       <NA> 1899-12-30    4045.57\n72                       <NA> 1899-12-30    3492.40\n73   R.P. N° 071-2019-SERNANP 2019-03-10    3354.05\n74                       <NA> 1899-12-30    2994.30\n75   R.P. N° 144-2020-SERNANP 2020-09-17    1880.50\n76                       <NA> 1899-12-30    1332.28\n77   R.P. N° 169-2016-SERNANP 2016-08-05    1047.22\n78                       <NA> 1899-12-30    1002.71\n79                       <NA> 1899-12-30     429.19\n80                       <NA> 1899-12-30      26.25\n```\n:::\n:::\n\n\n### Seleccionar columnas con select()\n\n<p align=\"center\">\n\n<img src=\"fig/select.png\" width=\"500\"/>\n\n</p>\n\nNo es raro obtener conjuntos de datos con cientos o incluso miles de variables. En este caso, el primer desafío a menudo se reduce a las variables que realmente te interesan. `select()` te permite seleccionar rápidamente un subconjunto útil utilizando operaciones basadas en los nombres de las variables.\n\n`select()` no es muy útil con los datos de los vuelos porque solo tenemos 19 variables, pero de todos modos se entiende la idea general:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar columnas por nombre\ndplyr::select(z_amortiguamiento, Codigo, Area_natur)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Codigo                          Area_natur\n1    RC04                           Ashaninka\n2    BP03                          de Pui Pui\n3    RN12                              Matsés\n4    RN10                  Allpahuayo Mishana\n5    RN06          de Salinas y Aguada Blanca\n6    RN02                            de Junín\n7    RN01    Pampa Galeras Barbara D' Achille\n8    SH04                     Bosque de Pomac\n9    SH02             de la Pampa de Ayacucho\n10   SH01                       de Chacamarca\n11   SN09                 Cordillera de Colán\n12   SN08                  Tabaconas-Namballe\n13   SN04                            de Ampay\n14   SN01                         de Huayllay\n15   PN14                  Sierra del Divisor\n16   PN14                  Sierra del Divisor\n17   PN14                  Sierra del Divisor\n18   PN09                     Cordillera Azul\n19   PN08                      Bahuaja-Sonene\n20   PN05                   Cerros de Amotape\n21   PN05                   Cerros de Amotape\n22   PN05                   Cerros de Amotape\n23   PN04                           Huascarán\n24   PN03                            del Manu\n25   PN03                            del Manu\n26   PN01                          de Cutervo\n27   PN12 Ichigkat Muja-Cordillera del Cóndor\n28   RN14                            Pucacuro\n29   CC02                         Sunchubamba\n30   PN06                      del Río Abiseo\n31   ZR03                    Santiago Comaina\n32   ZR03                    Santiago Comaina\n33   SH03                         Machupicchu\n34   RC03                          Amarakaeri\n35   RC05                         Machiguenga\n36   SN05             los Manglares de Tumbes\n37   RC05                         Machiguenga\n38   RC05                         Machiguenga\n39   SN07                       Pampa Hermosa\n40  RVS01                          Laquipampa\n41  RVS02               Los Pantanos de Villa\n42   RN08                      Pacaya-Samiria\n43   RN03                          de Paracas\n44   ZR01                        Chancaybaños\n45   RC07                           Tuntanain\n46   RC08                          Chayu Naín\n47   RC08                          Chayu Naín\n48  RVS03           Bosques Nublados de Udima\n49  RVS03           Bosques Nublados de Udima\n50  RVS03           Bosques Nublados de Udima\n51   RC02                             El Sira\n52   SN03                    Lagunas de Mejía\n53   BP05                       de Pagaibamba\n54   RN07                          de Calipuy\n55   SN02                          de Calipuy\n56   PN02                      de Tingo María\n57   CC01                           El Angolo\n58   RC06                               Purús\n59   RN04                           de Lachay\n60   RP02             Subcuenca del Cotahuasi\n61   RN15                        San Fernando\n62   RN09                           Tambopata\n63   RN09                           Tambopata\n64   RN09                           Tambopata\n65   PN10                              Otishi\n66   PN11                          Alto Purús\n67   PN11                          Alto Purús\n68   PN11                          Alto Purús\n69   RN05                        del Titicaca\n70   PN15                              Yaguas\n71   PN07                 Yanachaga-Chemillén\n72   SN06                           Megantoni\n73   SN06                           Megantoni\n74   RC09                            Airo Pai\n75   BP04               San Matias-San Carlos\n76   RC01                             Yanesha\n77   BP06                           Alto Mayo\n78   RP01                   Nor Yauyos-Cochas\n79   RC10                             Huimeki\n80   RC10                             Huimeki\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar todas las columnas entre anio y dia (incluyente)\ndplyr::select(z_amortiguamiento, Codigo:Periodo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Codigo                          Area_natur   Periodo\n1    RC04                           Ashaninka 2019-2023\n2    BP03                          de Pui Pui 2019-2023\n3    RN12                              Matsés 2023-2027\n4    RN10                  Allpahuayo Mishana 2022-2026\n5    RN06          de Salinas y Aguada Blanca 2016-2020\n6    RN02                            de Junín 2008-2012\n7    RN01    Pampa Galeras Barbara D' Achille 2022-2026\n8    SH04                     Bosque de Pomac 2017-2021\n9    SH02             de la Pampa de Ayacucho 2016-2020\n10   SH01                       de Chacamarca 2002-2007\n11   SN09                 Cordillera de Colán 2016-2020\n12   SN08                  Tabaconas-Namballe 2023-2027\n13   SN04                            de Ampay 2015-2019\n14   SN01                         de Huayllay 2018-2022\n15   PN14                  Sierra del Divisor 2023-2027\n16   PN14                  Sierra del Divisor 2023-2027\n17   PN14                  Sierra del Divisor 2023-2027\n18   PN09                     Cordillera Azul 2017-2021\n19   PN08                      Bahuaja-Sonene 2015-2019\n20   PN05                   Cerros de Amotape 2012-2017\n21   PN05                   Cerros de Amotape 2012-2017\n22   PN05                   Cerros de Amotape 2012-2017\n23   PN04                           Huascarán 2017-2021\n24   PN03                            del Manu 2019-2023\n25   PN03                            del Manu 2019-2023\n26   PN01                          de Cutervo 2017-2021\n27   PN12 Ichigkat Muja-Cordillera del Cóndor 2019-2023\n28   RN14                            Pucacuro 2019-2023\n29   CC02                         Sunchubamba      <NA>\n30   PN06                      del Río Abiseo 2014-2019\n31   ZR03                    Santiago Comaina      <NA>\n32   ZR03                    Santiago Comaina      <NA>\n33   SH03                         Machupicchu 2015-2019\n34   RC03                          Amarakaeri 2016-2020\n35   RC05                         Machiguenga 2023-2027\n36   SN05             los Manglares de Tumbes 2023-2027\n37   RC05                         Machiguenga 2023-2027\n38   RC05                         Machiguenga 2023-2027\n39   SN07                       Pampa Hermosa 2022-2027\n40  RVS01                          Laquipampa 2015-2019\n41  RVS02               Los Pantanos de Villa 2016-2020\n42   RN08                      Pacaya-Samiria 2017-2021\n43   RN03                          de Paracas 2016-2020\n44   ZR01                        Chancaybaños      <NA>\n45   RC07                           Tuntanain 2016-2020\n46   RC08                          Chayu Naín      <NA>\n47   RC08                          Chayu Naín      <NA>\n48  RVS03           Bosques Nublados de Udima 2015-2019\n49  RVS03           Bosques Nublados de Udima 2015-2019\n50  RVS03           Bosques Nublados de Udima 2015-2019\n51   RC02                             El Sira 2015-2019\n52   SN03                    Lagunas de Mejía 2015-2019\n53   BP05                       de Pagaibamba 2017-2021\n54   RN07                          de Calipuy 2015-2019\n55   SN02                          de Calipuy 2015-2019\n56   PN02                      de Tingo María 2022-2026\n57   CC01                           El Angolo 2019-2023\n58   RC06                               Purús 2019-2023\n59   RN04                           de Lachay 2019-2023\n60   RP02             Subcuenca del Cotahuasi 2019-2023\n61   RN15                        San Fernando 2019-2024\n62   RN09                           Tambopata 2019-2023\n63   RN09                           Tambopata 2019-2023\n64   RN09                           Tambopata 2019-2023\n65   PN10                              Otishi 2016-2020\n66   PN11                          Alto Purús 2019-2023\n67   PN11                          Alto Purús 2019-2023\n68   PN11                          Alto Purús 2019-2023\n69   RN05                        del Titicaca 2021-2025\n70   PN15                              Yaguas 2021-2025\n71   PN07                 Yanachaga-Chemillén 2022-2026\n72   SN06                           Megantoni 2022-2026\n73   SN06                           Megantoni 2022-2026\n74   RC09                            Airo Pai 2022-2026\n75   BP04               San Matias-San Carlos 2023-2027\n76   RC01                             Yanesha 2017-2021\n77   BP06                           Alto Mayo 2023-2027\n78   RP01                   Nor Yauyos-Cochas 2022-2027\n79   RC10                             Huimeki 2023-2027\n80   RC10                             Huimeki 2023-2027\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar todas las columnas excepto aquellas entre anio en dia (incluyente)\ndplyr::select(z_amortiguamiento, -(Codigo:Periodo))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X                 Base_legal Fecha_lega               Base_leg00 Fecha_le00\n1   1   R.P. Nº 239-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n2   2    R.J. Nº 285-2008 INRENA 2008-10-28                     <NA> 1899-12-30\n3   3 R.P. Nº 054-2014-SERNANP-J 2014-02-27                     <NA> 1899-12-30\n4   4    R.J. Nº 159-2007 INRENA 2007-07-24                     <NA> 1899-12-30\n5   5    R.J. Nº 087-2007 INRENA 2007-04-26                     <NA> 1899-12-30\n6   6    R.J. Nº 145-2008 INRENA 2008-06-03                     <NA> 1899-12-30\n7   7    R.J. Nº 331-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n8   8   R.P. Nº 006-2011-SERNANP 2011-01-19                     <NA> 1899-12-30\n9   9   R.P. N° 019-2016-SERNANP 2016-01-29                     <NA> 1899-12-30\n10 10    R.J. Nº 466-2002-INRENA 2002-12-20                     <NA> 1899-12-30\n11 11   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n12 12    R.J. Nº 015-2007 INRENA 2007-01-22                     <NA> 1899-12-30\n13 13   R.P. Nº 168-2015-SERNANP 2014-12-22                     <NA> 1899-12-30\n14 14    R.J. Nº 325-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n15 15   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n16 16   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n17 17   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n18 18   R.P. Nº 064-2011-SERNANP 2011-04-14                     <NA> 1899-12-30\n19 19   R.P. Nº 111-2015-SERNANP 2015-06-10                     <NA> 1899-12-30\n20 20   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n21 21   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n22 22   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n23 23   R.P. Nº 241-2010-SERNANP 2010-12-30                     <NA> 1899-12-30\n24 24   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n25 25   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n26 26   R.P. Nº 175-2009-SERNANP 2009-09-24                     <NA> 1899-12-30\n27 27    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n28 28   R.P. Nº 047-2013-SERNANP 2013-03-20                     <NA> 1899-12-30\n29 29    R.J. Nº 303-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n30 30   R.J. Nº 253 -2006 INRENA 2006-09-27                     <NA> 1899-12-30\n31 31    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n32 32    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n33 33   R.P. Nº 070-2015-SERNANP 2015-04-17                     <NA> 1899-12-30\n34 34   R.P. N° 198-2016-SERNANP 2016-07-26                     <NA> 1899-12-30\n35 35   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n36 36   R.P. N° 063-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n37 37   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n38 38   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n39 39   R.P. Nº 213-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n40 40   R.P. Nº 014-2015-SERNANP 2015-01-27                     <NA> 1899-12-30\n41 41    R.J. Nº 358-2001-INRENA 2001-12-28                     <NA> 1899-12-30\n42 42   R.J. Nº 173-2009 SERNANP 2009-09-24                     <NA> 1899-12-30\n43 43   R.P. Nº 020-2016 SERNANP 2016-01-29                     <NA> 1899-12-30\n44 44    R.J. Nº 337-2001-INRENA 2001-12-26                     <NA> 1899-12-30\n45 45    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n46 46   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n47 47   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n48 48   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n49 49   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n50 50   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n51 51   R.P. Nº 044-2009 SERNANP 2009-02-27                     <NA> 1899-12-30\n52 52   R.P. Nº 238-2015-SERNANP 2015-10-29                     <NA> 1899-12-30\n53 53    R.J. Nº 306-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n54 54   R.P. Nº 032-2015-SERNANP 2015-02-18                     <NA> 1899-12-30\n55 55   R.P. Nº 021-2015-SERNANP 2015-02-10                     <NA> 1899-12-30\n56 56   R.P. N° 090-2017-SERNANP 2017-03-31                     <NA> 1899-12-30\n57 57   R.P. N° 212-2012-SERNANP 2012-11-28                     <NA> 1899-12-30\n58 58   R.P. Nº 003-2013-SERNANP 1899-12-30                     <NA> 1899-12-30\n59 59   R.P. Nº 090-2013-SERNANP 2013-05-30                     <NA> 1899-12-30\n60 60   R.P. Nº 163-2009 SERNANP 2009-09-15                     <NA> 1899-12-30\n61 61   R.P. Nº 118-2015-SERNANP 2015-06-19                     <NA> 1899-12-30\n62 62    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n63 63    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n64 64    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n65 65   R.P. N° 290-2016-SERNANP 2016-10-31                     <NA> 1899-12-30\n66 66   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n67 67   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n68 68   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n69 69   R.P. N° 038-2021-SERNANP 2021-02-12                     <NA> 1899-12-30\n70 70   R.P. Nº 085-2021-SERNANP 2021-04-23                     <NA> 1899-12-30\n71 71   R.P. N° 011-2022-SERNANP 2022-01-13                     <NA> 1899-12-30\n72 72   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n73 73   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n74 74   R.P. N° 058-2022-SERNANP 2022-02-16                     <NA> 1899-12-30\n75 75   R.P. N° 268-2015-SERNANP 2015-11-27                     <NA> 1899-12-30\n76 76   R.J. Nº 129-2011-SERNANP 2011-07-01                     <NA> 1899-12-30\n77 77   R.P. Nº 069-2023-SERNANP 2023-02-27                     <NA> 1899-12-30\n78 78    R.J. Nº 194-2006 INRENA 2006-07-20                     <NA> 1899-12-30\n79 79    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n80 80    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n                   Base_leg01 Fecha_le01 Superficie\n1    R.P. N° 034-2019-SERNANP 2019-01-29  325684.03\n2    R.P. N° 033-2019-SERNANP 2019-01-29   45367.20\n3     R.P N° 320-2022-SERNANP 2022-12-29  231397.76\n4    R.P. N° 082-2022-SERNANP 2022-03-15   65956.53\n5    R.P. N° 257-2016-SERNANP 2016-09-14  310242.10\n6                        <NA> 1899-12-30  100858.12\n7  R.P. N° 069-2022-SERNANP\\n 2022-03-02   14530.51\n8     R.P. N° 91-2017-SERNANP 2017-03-31    9291.39\n9                        <NA> 1899-12-30     429.19\n10                       <NA> 1899-12-30    1332.28\n11   R.P. N° 140-2016-SERNANP 2016-06-06   18866.71\n12   R.P. N° 338-2022-SERNANP 2022-12-29   44993.90\n13   R.P. Nº 012-2022-SERNANP 2022-01-13    5702.07\n14   R.P. N° 268-2018-SERNANP 2018-11-05    4843.62\n15   R.P. N° 043-2023-SERNANP 2023-02-01  362286.24\n16   R.P. N° 043-2023-SERNANP 2023-02-01  260177.68\n17   R.P. N° 043-2023-SERNANP 2023-02-01    9106.53\n18   R.P. N° 032-2017-SERNANP 2017-01-31 2304596.68\n19                       <NA> 1899-12-30  261127.28\n20                       <NA> 1899-12-30   66699.00\n21                       <NA> 1899-12-30    3492.40\n22                       <NA> 1899-12-30   21614.02\n23    R.P. N° 64-2017-SERNANP 2017-02-28  178434.11\n24   R.P. N° 337-2018-SERNANP 2018-12-31  392819.65\n25   R.P. N° 337-2018-SERNANP 2018-12-31  273370.45\n26   R.P. N° 031-2017-SERNANP 2017-01-31   19009.20\n27   R.P. N° 338-2018-SERNANP 2018-12-31  138965.15\n28   R.P. N° 339-2018-SERNANP 2018-12-31  339499.85\n29                       <NA> 1899-12-30   28404.36\n30    R.P. N° 73-2014-SERNANP 2014-03-25  671363.75\n31                       <NA> 1899-12-30  117141.77\n32                       <NA> 1899-12-30   87651.54\n33                       <NA> 1899-12-30  133083.09\n34                       <NA> 1899-12-30  283545.59\n35   R.P. N° 339-2022-SERNANP 2022-12-29  316383.50\n36   R.P. N° 064-2023-SERNANP 2023-02-17    5208.08\n37   R.P. N° 339-2022-SERNANP 2022-12-29    6371.03\n38   R.P. N° 339-2022-SERNANP 2022-12-29  197205.13\n39   R.P. Nº 184-2022-SERNANP 2022-08-04    8652.24\n40                       <NA> 1899-12-30    4622.00\n41   R.P. N° 169-2016-SERNANP 2016-08-05    1047.22\n42   R.P. N° 273-2017-SERNANP 2017-11-30 1219807.51\n43                       <NA> 1899-12-30  140885.51\n44                       <NA> 1899-12-30    4045.57\n45   R.P. N° 139-2016-SERNANP 2016-06-06  288188.56\n46                       <NA> 1899-12-30    8236.84\n47                       <NA> 1899-12-30    4153.80\n48                       <NA> 1899-12-30    2994.30\n49                       <NA> 1899-12-30      26.25\n50                       <NA> 1899-12-30    1002.71\n51   R.P. N° 134-2015-SERNANP 2015-07-09 1095646.64\n52   R.P. N° 144-2020-SERNANP 2020-09-17    1880.50\n53   R.P. N° 130-2017-SERNANP 2017-05-22    4100.13\n54                       <NA> 1899-12-30   36660.57\n55                       <NA> 1899-12-30   10506.92\n56   R.P. Nº 027-2022-SERNANP 2022-01-20    4125.72\n57   R.P. N° 336-2018-SERNANP 2018-12-31   29583.14\n58   R.P. N° 062-2019-SERNANP 2019-02-25  222423.17\n59   R.P. N° 071-2019-SERNANP 2019-03-10    3354.05\n60   R.P. N° 079-2019-SERNANP 2019-03-14  485112.73\n61   R.P. Nº 239-2019-SERNANP 2019-10-11   73256.14\n62   R.P. N° 035-2019-SERNANP 2019-01-29   15650.38\n63   R.P. N° 035-2019-SERNANP 2019-01-29   22027.06\n64   R.P. N° 035-2019-SERNANP 2019-01-29  193877.91\n65                       <NA> 1899-12-30   38887.63\n66   R.P. N° 087-2019-SERNANP 2019-04-04  632382.65\n67   R.P. N° 087-2019-SERNANP 2019-04-04  867663.35\n68   R.P. N° 087-2019-SERNANP 2019-04-04  202033.34\n69                       <NA> 1899-12-30  164565.27\n70                       <NA> 1899-12-30  241073.13\n71                       <NA> 1899-12-30   60785.61\n72                       <NA> 1899-12-30  128192.77\n73                       <NA> 1899-12-30   77891.55\n74                       <NA> 1899-12-30   62423.85\n75   R.P. N° 332-2022-SERNANP 2022-12-29  128479.57\n76   R.P. N° 346-2016-SERNANP 2016-12-29   51379.07\n77                       <NA> 1899-12-30  222953.88\n78   R.P. N° 264-2022-SERNANP 2022-11-15  109438.36\n79                       <NA> 1899-12-30    5499.98\n80                       <NA> 1899-12-30   16655.73\n```\n:::\n:::\n\n\nHay una serie de **funciones auxiliares** que puedes usar dentro de `select()`:\n\n-   **`starts_with(\"abc\")`**: coincide con los nombres que comienzan con \"abc\".\n-   **`ends_with(\"xyz\")`**: coincide con los nombres que terminan con \"xyz\".\n-   **`contains(\"ijk\")`**: coincide con los nombres que contienen \"ijk\".\n-   **`matches(\"(.)\\\\1\")`**: selecciona variables que coinciden con una expresión regular **(regex)**. Esta en particular coincide con cualquier variable que contenga caracteres repetidos.\n-   **`num_range(\"x\", 1:3)`**: coincide con x1,x2 y x3.\n\nConsulta `?select` para ver más detalles.\n\n`select()` se puede usar para cambiar el nombre de las variables, pero rara vez es útil porque descarta todas las variables que no se mencionan explícitamente. En su lugar, utiliza **`rename()`**, que es una variante de `select()` que mantiene todas las variables que no se mencionan explícitamente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(z_amortiguamiento)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"X\"          \"Codigo\"     \"Area_natur\" \"Periodo\"    \"Base_legal\"\n [6] \"Fecha_lega\" \"Base_leg00\" \"Fecha_le00\" \"Base_leg01\" \"Fecha_le01\"\n[11] \"Superficie\"\n```\n:::\n\n```{.r .cell-code}\n# new name = old name\ndf <- rename(z_amortiguamiento, \"Baselegal\" = Base_legal)\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"X\"          \"Codigo\"     \"Area_natur\" \"Periodo\"    \"Baselegal\" \n [6] \"Fecha_lega\" \"Base_leg00\" \"Fecha_le00\" \"Base_leg01\" \"Fecha_le01\"\n[11] \"Superficie\"\n```\n:::\n:::\n\n\nOtra opción es usar `select()` junto con el auxiliar **`everything()`** (todo, en inglés). Esto es útil si tienes un grupo de variables que te gustaría mover al comienzo del data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::select(z_amortiguamiento, X, Superficie, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Superficie Codigo                          Area_natur   Periodo\n1   1  325684.03   RC04                           Ashaninka 2019-2023\n2   2   45367.20   BP03                          de Pui Pui 2019-2023\n3   3  231397.76   RN12                              Matsés 2023-2027\n4   4   65956.53   RN10                  Allpahuayo Mishana 2022-2026\n5   5  310242.10   RN06          de Salinas y Aguada Blanca 2016-2020\n6   6  100858.12   RN02                            de Junín 2008-2012\n7   7   14530.51   RN01    Pampa Galeras Barbara D' Achille 2022-2026\n8   8    9291.39   SH04                     Bosque de Pomac 2017-2021\n9   9     429.19   SH02             de la Pampa de Ayacucho 2016-2020\n10 10    1332.28   SH01                       de Chacamarca 2002-2007\n11 11   18866.71   SN09                 Cordillera de Colán 2016-2020\n12 12   44993.90   SN08                  Tabaconas-Namballe 2023-2027\n13 13    5702.07   SN04                            de Ampay 2015-2019\n14 14    4843.62   SN01                         de Huayllay 2018-2022\n15 15  362286.24   PN14                  Sierra del Divisor 2023-2027\n16 16  260177.68   PN14                  Sierra del Divisor 2023-2027\n17 17    9106.53   PN14                  Sierra del Divisor 2023-2027\n18 18 2304596.68   PN09                     Cordillera Azul 2017-2021\n19 19  261127.28   PN08                      Bahuaja-Sonene 2015-2019\n20 20   66699.00   PN05                   Cerros de Amotape 2012-2017\n21 21    3492.40   PN05                   Cerros de Amotape 2012-2017\n22 22   21614.02   PN05                   Cerros de Amotape 2012-2017\n23 23  178434.11   PN04                           Huascarán 2017-2021\n24 24  392819.65   PN03                            del Manu 2019-2023\n25 25  273370.45   PN03                            del Manu 2019-2023\n26 26   19009.20   PN01                          de Cutervo 2017-2021\n27 27  138965.15   PN12 Ichigkat Muja-Cordillera del Cóndor 2019-2023\n28 28  339499.85   RN14                            Pucacuro 2019-2023\n29 29   28404.36   CC02                         Sunchubamba      <NA>\n30 30  671363.75   PN06                      del Río Abiseo 2014-2019\n31 31  117141.77   ZR03                    Santiago Comaina      <NA>\n32 32   87651.54   ZR03                    Santiago Comaina      <NA>\n33 33  133083.09   SH03                         Machupicchu 2015-2019\n34 34  283545.59   RC03                          Amarakaeri 2016-2020\n35 35  316383.50   RC05                         Machiguenga 2023-2027\n36 36    5208.08   SN05             los Manglares de Tumbes 2023-2027\n37 37    6371.03   RC05                         Machiguenga 2023-2027\n38 38  197205.13   RC05                         Machiguenga 2023-2027\n39 39    8652.24   SN07                       Pampa Hermosa 2022-2027\n40 40    4622.00  RVS01                          Laquipampa 2015-2019\n41 41    1047.22  RVS02               Los Pantanos de Villa 2016-2020\n42 42 1219807.51   RN08                      Pacaya-Samiria 2017-2021\n43 43  140885.51   RN03                          de Paracas 2016-2020\n44 44    4045.57   ZR01                        Chancaybaños      <NA>\n45 45  288188.56   RC07                           Tuntanain 2016-2020\n46 46    8236.84   RC08                          Chayu Naín      <NA>\n47 47    4153.80   RC08                          Chayu Naín      <NA>\n48 48    2994.30  RVS03           Bosques Nublados de Udima 2015-2019\n49 49      26.25  RVS03           Bosques Nublados de Udima 2015-2019\n50 50    1002.71  RVS03           Bosques Nublados de Udima 2015-2019\n51 51 1095646.64   RC02                             El Sira 2015-2019\n52 52    1880.50   SN03                    Lagunas de Mejía 2015-2019\n53 53    4100.13   BP05                       de Pagaibamba 2017-2021\n54 54   36660.57   RN07                          de Calipuy 2015-2019\n55 55   10506.92   SN02                          de Calipuy 2015-2019\n56 56    4125.72   PN02                      de Tingo María 2022-2026\n57 57   29583.14   CC01                           El Angolo 2019-2023\n58 58  222423.17   RC06                               Purús 2019-2023\n59 59    3354.05   RN04                           de Lachay 2019-2023\n60 60  485112.73   RP02             Subcuenca del Cotahuasi 2019-2023\n61 61   73256.14   RN15                        San Fernando 2019-2024\n62 62   15650.38   RN09                           Tambopata 2019-2023\n63 63   22027.06   RN09                           Tambopata 2019-2023\n64 64  193877.91   RN09                           Tambopata 2019-2023\n65 65   38887.63   PN10                              Otishi 2016-2020\n66 66  632382.65   PN11                          Alto Purús 2019-2023\n67 67  867663.35   PN11                          Alto Purús 2019-2023\n68 68  202033.34   PN11                          Alto Purús 2019-2023\n69 69  164565.27   RN05                        del Titicaca 2021-2025\n70 70  241073.13   PN15                              Yaguas 2021-2025\n71 71   60785.61   PN07                 Yanachaga-Chemillén 2022-2026\n72 72  128192.77   SN06                           Megantoni 2022-2026\n73 73   77891.55   SN06                           Megantoni 2022-2026\n74 74   62423.85   RC09                            Airo Pai 2022-2026\n75 75  128479.57   BP04               San Matias-San Carlos 2023-2027\n76 76   51379.07   RC01                             Yanesha 2017-2021\n77 77  222953.88   BP06                           Alto Mayo 2023-2027\n78 78  109438.36   RP01                   Nor Yauyos-Cochas 2022-2027\n79 79    5499.98   RC10                             Huimeki 2023-2027\n80 80   16655.73   RC10                             Huimeki 2023-2027\n                   Base_legal Fecha_lega               Base_leg00 Fecha_le00\n1    R.P. Nº 239-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n2     R.J. Nº 285-2008 INRENA 2008-10-28                     <NA> 1899-12-30\n3  R.P. Nº 054-2014-SERNANP-J 2014-02-27                     <NA> 1899-12-30\n4     R.J. Nº 159-2007 INRENA 2007-07-24                     <NA> 1899-12-30\n5     R.J. Nº 087-2007 INRENA 2007-04-26                     <NA> 1899-12-30\n6     R.J. Nº 145-2008 INRENA 2008-06-03                     <NA> 1899-12-30\n7     R.J. Nº 331-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n8    R.P. Nº 006-2011-SERNANP 2011-01-19                     <NA> 1899-12-30\n9    R.P. N° 019-2016-SERNANP 2016-01-29                     <NA> 1899-12-30\n10    R.J. Nº 466-2002-INRENA 2002-12-20                     <NA> 1899-12-30\n11   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n12    R.J. Nº 015-2007 INRENA 2007-01-22                     <NA> 1899-12-30\n13   R.P. Nº 168-2015-SERNANP 2014-12-22                     <NA> 1899-12-30\n14    R.J. Nº 325-2001 INRENA 2001-12-13                     <NA> 1899-12-30\n15   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n16   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n17   R.P. N° 295-2016-SERNANP 2016-11-07                     <NA> 1899-12-30\n18   R.P. Nº 064-2011-SERNANP 2011-04-14                     <NA> 1899-12-30\n19   R.P. Nº 111-2015-SERNANP 2015-06-10                     <NA> 1899-12-30\n20   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n21   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n22   R.P. N° 039-2012-SERNANP 2012-02-17             Ley N° 30359 2015-11-11\n23   R.P. Nº 241-2010-SERNANP 2010-12-30                     <NA> 1899-12-30\n24   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n25   R.P. Nº 087-2013-SERNANP 2013-05-22                     <NA> 1899-12-30\n26   R.P. Nº 175-2009-SERNANP 2009-09-24                     <NA> 1899-12-30\n27    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n28   R.P. Nº 047-2013-SERNANP 2013-03-20                     <NA> 1899-12-30\n29    R.J. Nº 303-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n30   R.J. Nº 253 -2006 INRENA 2006-09-27                     <NA> 1899-12-30\n31    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n32    R.J. Nº 211-2007-INRENA 2007-09-12                     <NA> 1899-12-30\n33   R.P. Nº 070-2015-SERNANP 2015-04-17                     <NA> 1899-12-30\n34   R.P. N° 198-2016-SERNANP 2016-07-26                     <NA> 1899-12-30\n35   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n36   R.P. N° 063-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n37   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n38   R.P. N° 065-2017-SERNANP 2017-02-28                     <NA> 1899-12-30\n39   R.P. Nº 213-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n40   R.P. Nº 014-2015-SERNANP 2015-01-27                     <NA> 1899-12-30\n41    R.J. Nº 358-2001-INRENA 2001-12-28                     <NA> 1899-12-30\n42   R.J. Nº 173-2009 SERNANP 2009-09-24                     <NA> 1899-12-30\n43   R.P. Nº 020-2016 SERNANP 2016-01-29                     <NA> 1899-12-30\n44    R.J. Nº 337-2001-INRENA 2001-12-26                     <NA> 1899-12-30\n45    R.J. Nº 211-2007 INRENA 2007-09-12                     <NA> 1899-12-30\n46   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n47   R.P. Nº 026-2011-SERNANP 2011-02-18                     <NA> 1899-12-30\n48   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n49   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n50   R.P. Nº 052-2015-SERNANP 2015-03-16                     <NA> 1899-12-30\n51   R.P. Nº 044-2009 SERNANP 2009-02-27                     <NA> 1899-12-30\n52   R.P. Nº 238-2015-SERNANP 2015-10-29                     <NA> 1899-12-30\n53    R.J. Nº 306-2001-INRENA 2001-12-13                     <NA> 1899-12-30\n54   R.P. Nº 032-2015-SERNANP 2015-02-18                     <NA> 1899-12-30\n55   R.P. Nº 021-2015-SERNANP 2015-02-10                     <NA> 1899-12-30\n56   R.P. N° 090-2017-SERNANP 2017-03-31                     <NA> 1899-12-30\n57   R.P. N° 212-2012-SERNANP 2012-11-28                     <NA> 1899-12-30\n58   R.P. Nº 003-2013-SERNANP 1899-12-30                     <NA> 1899-12-30\n59   R.P. Nº 090-2013-SERNANP 2013-05-30                     <NA> 1899-12-30\n60   R.P. Nº 163-2009 SERNANP 2009-09-15                     <NA> 1899-12-30\n61   R.P. Nº 118-2015-SERNANP 2015-06-19                     <NA> 1899-12-30\n62    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n63    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n64    R.J. Nº 290-2005 INRENA 2005-12-06 R.P. N° 240-2017-SERNANP 2017-10-02\n65   R.P. N° 290-2016-SERNANP 2016-10-31                     <NA> 1899-12-30\n66   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n67   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n68   R.P. Nº 238-2012-SERNANP 2012-12-28                     <NA> 1899-12-30\n69   R.P. N° 038-2021-SERNANP 2021-02-12                     <NA> 1899-12-30\n70   R.P. Nº 085-2021-SERNANP 2021-04-23                     <NA> 1899-12-30\n71   R.P. N° 011-2022-SERNANP 2022-01-13                     <NA> 1899-12-30\n72   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n73   R.P. Nº 024-2022-SERNANP 2022-01-20                     <NA> 1899-12-30\n74   R.P. N° 058-2022-SERNANP 2022-02-16                     <NA> 1899-12-30\n75   R.P. N° 268-2015-SERNANP 2015-11-27                     <NA> 1899-12-30\n76   R.J. Nº 129-2011-SERNANP 2011-07-01                     <NA> 1899-12-30\n77   R.P. Nº 069-2023-SERNANP 2023-02-27                     <NA> 1899-12-30\n78    R.J. Nº 194-2006 INRENA 2006-07-20                     <NA> 1899-12-30\n79    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n80    R.P N° 080-2023-SERNANP 2023-03-01                     <NA> 1899-12-30\n                   Base_leg01 Fecha_le01\n1    R.P. N° 034-2019-SERNANP 2019-01-29\n2    R.P. N° 033-2019-SERNANP 2019-01-29\n3     R.P N° 320-2022-SERNANP 2022-12-29\n4    R.P. N° 082-2022-SERNANP 2022-03-15\n5    R.P. N° 257-2016-SERNANP 2016-09-14\n6                        <NA> 1899-12-30\n7  R.P. N° 069-2022-SERNANP\\n 2022-03-02\n8     R.P. N° 91-2017-SERNANP 2017-03-31\n9                        <NA> 1899-12-30\n10                       <NA> 1899-12-30\n11   R.P. N° 140-2016-SERNANP 2016-06-06\n12   R.P. N° 338-2022-SERNANP 2022-12-29\n13   R.P. Nº 012-2022-SERNANP 2022-01-13\n14   R.P. N° 268-2018-SERNANP 2018-11-05\n15   R.P. N° 043-2023-SERNANP 2023-02-01\n16   R.P. N° 043-2023-SERNANP 2023-02-01\n17   R.P. N° 043-2023-SERNANP 2023-02-01\n18   R.P. N° 032-2017-SERNANP 2017-01-31\n19                       <NA> 1899-12-30\n20                       <NA> 1899-12-30\n21                       <NA> 1899-12-30\n22                       <NA> 1899-12-30\n23    R.P. N° 64-2017-SERNANP 2017-02-28\n24   R.P. N° 337-2018-SERNANP 2018-12-31\n25   R.P. N° 337-2018-SERNANP 2018-12-31\n26   R.P. N° 031-2017-SERNANP 2017-01-31\n27   R.P. N° 338-2018-SERNANP 2018-12-31\n28   R.P. N° 339-2018-SERNANP 2018-12-31\n29                       <NA> 1899-12-30\n30    R.P. N° 73-2014-SERNANP 2014-03-25\n31                       <NA> 1899-12-30\n32                       <NA> 1899-12-30\n33                       <NA> 1899-12-30\n34                       <NA> 1899-12-30\n35   R.P. N° 339-2022-SERNANP 2022-12-29\n36   R.P. N° 064-2023-SERNANP 2023-02-17\n37   R.P. N° 339-2022-SERNANP 2022-12-29\n38   R.P. N° 339-2022-SERNANP 2022-12-29\n39   R.P. Nº 184-2022-SERNANP 2022-08-04\n40                       <NA> 1899-12-30\n41   R.P. N° 169-2016-SERNANP 2016-08-05\n42   R.P. N° 273-2017-SERNANP 2017-11-30\n43                       <NA> 1899-12-30\n44                       <NA> 1899-12-30\n45   R.P. N° 139-2016-SERNANP 2016-06-06\n46                       <NA> 1899-12-30\n47                       <NA> 1899-12-30\n48                       <NA> 1899-12-30\n49                       <NA> 1899-12-30\n50                       <NA> 1899-12-30\n51   R.P. N° 134-2015-SERNANP 2015-07-09\n52   R.P. N° 144-2020-SERNANP 2020-09-17\n53   R.P. N° 130-2017-SERNANP 2017-05-22\n54                       <NA> 1899-12-30\n55                       <NA> 1899-12-30\n56   R.P. Nº 027-2022-SERNANP 2022-01-20\n57   R.P. N° 336-2018-SERNANP 2018-12-31\n58   R.P. N° 062-2019-SERNANP 2019-02-25\n59   R.P. N° 071-2019-SERNANP 2019-03-10\n60   R.P. N° 079-2019-SERNANP 2019-03-14\n61   R.P. Nº 239-2019-SERNANP 2019-10-11\n62   R.P. N° 035-2019-SERNANP 2019-01-29\n63   R.P. N° 035-2019-SERNANP 2019-01-29\n64   R.P. N° 035-2019-SERNANP 2019-01-29\n65                       <NA> 1899-12-30\n66   R.P. N° 087-2019-SERNANP 2019-04-04\n67   R.P. N° 087-2019-SERNANP 2019-04-04\n68   R.P. N° 087-2019-SERNANP 2019-04-04\n69                       <NA> 1899-12-30\n70                       <NA> 1899-12-30\n71                       <NA> 1899-12-30\n72                       <NA> 1899-12-30\n73                       <NA> 1899-12-30\n74                       <NA> 1899-12-30\n75   R.P. N° 332-2022-SERNANP 2022-12-29\n76   R.P. N° 346-2016-SERNANP 2016-12-29\n77                       <NA> 1899-12-30\n78   R.P. N° 264-2022-SERNANP 2022-11-15\n79                       <NA> 1899-12-30\n80                       <NA> 1899-12-30\n```\n:::\n:::\n\n\n### Añadir nuevas variables con mutate()\n\n<p align=\"center\">\n\n<img src=\"fig/mutate.png\" width=\"500\"/>\n\n</p>\n\nAdemás de seleccionar conjuntos de columnas existentes, a menudo es útil crear nuevas columnas en función de columnas existentes. Ese es el trabajo de **`mutate()`** (del inglés mutar o transformar).\n\n**`mutate()`** siempre agrega nuevas columnas al final de un conjunto de datos, así que comenzaremos creando un conjunto de datos más pequeño para que podamos ver las nuevas variables. Recuerda que cuando usas **RStudio**, la manera más fácil de ver todas las columnas es **View()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nflights_sml <-\n  dplyr::select(\n    flights,\n    year:day,\n    ends_with(\"delay\"),\n    distance, air_time\n  )\nmutate(\n  flights_sml,\n  gain = arr_delay - dep_delay,\n  speed = distance / (air_time * 60)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 9\n    year month   day dep_delay arr_delay distance air_time  gain  speed\n   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl> <dbl>  <dbl>\n 1  2013     1     1         2        11     1400      227     9 0.103 \n 2  2013     1     1         4        20     1416      227    16 0.104 \n 3  2013     1     1         2        33     1089      160    31 0.113 \n 4  2013     1     1        -1       -18     1576      183   -17 0.144 \n 5  2013     1     1        -6       -25      762      116   -19 0.109 \n 6  2013     1     1        -4        12      719      150    16 0.0799\n 7  2013     1     1        -5        19     1065      158    24 0.112 \n 8  2013     1     1        -3       -14      229       53   -11 0.0720\n 9  2013     1     1        -3        -8      944      140    -5 0.112 \n10  2013     1     1        -2         8      733      138    10 0.0885\n# … with 336,766 more rows\n```\n:::\n:::\n\n\nTen en cuenta que puedes hacer referencia a las columnas que acabas de crear:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(\n  flights_sml,\n  gain = arr_delay - dep_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 10\n    year month   day dep_delay arr_delay distance air_time  gain hours gain_pe…¹\n   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl> <dbl> <dbl>     <dbl>\n 1  2013     1     1         2        11     1400      227     9 3.78       2.38\n 2  2013     1     1         4        20     1416      227    16 3.78       4.23\n 3  2013     1     1         2        33     1089      160    31 2.67      11.6 \n 4  2013     1     1        -1       -18     1576      183   -17 3.05      -5.57\n 5  2013     1     1        -6       -25      762      116   -19 1.93      -9.83\n 6  2013     1     1        -4        12      719      150    16 2.5        6.4 \n 7  2013     1     1        -5        19     1065      158    24 2.63       9.11\n 8  2013     1     1        -3       -14      229       53   -11 0.883    -12.5 \n 9  2013     1     1        -3        -8      944      140    -5 2.33      -2.14\n10  2013     1     1        -2         8      733      138    10 2.3        4.35\n# … with 336,766 more rows, and abbreviated variable name ¹​gain_per_hour\n```\n:::\n:::\n\n\nSi solo quieres conservar las nuevas variables, usa **`transmute()`**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransmute(\n  flights,\n  gain = arr_delay - dep_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n    gain hours gain_per_hour\n   <dbl> <dbl>         <dbl>\n 1     9 3.78           2.38\n 2    16 3.78           4.23\n 3    31 2.67          11.6 \n 4   -17 3.05          -5.57\n 5   -19 1.93          -9.83\n 6    16 2.5            6.4 \n 7    24 2.63           9.11\n 8   -11 0.883        -12.5 \n 9    -5 2.33          -2.14\n10    10 2.3            4.35\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n#### Funciones de creación útiles\n\nHay muchas funciones para crear nuevas variables que puedes usar con `mutate()`. La propiedad clave es que la función debe ser vectorizada: debe tomar un vector de valores como input, y devolver un vector con el mismo número de valores como output. No hay forma de enumerar todas las posibles funciones que podrías usar, pero aquí hay una selección de funciones que frecuentemente son útiles:\n\n-   Operadores aritméticos: `+`, `-`, `*`, `/`, `^`. Todos están vectorizados usando las llamadas **\"reglas de reciclaje\"**. Si un parámetro es más corto que el otro, se extenderá automáticamente para tener la misma longitud. Esto es muy útil cuando uno de los argumentos es un solo número: `air_time / 60`, `hours * 60 + minute`, etc. Los operadores aritméticos también son útiles junto con las funciones de agregar que aprenderás más adelante. Por ejemplo, `x / sum(x)` calcula la proporción de un total, y `y - mean(y)` calcula la diferencia de la media.\n\n-   **Aritmética modular**: **`%/%`** (división entera) y **`%%`** (resto), donde `x == y * (x %/% y) + (x %% y)`. La aritmética modular es una herramienta útil porque te permite dividir enteros en partes. Por ejemplo, en el conjunto de datos de vuelos, puedes calcular hora y minutos de **`dep_time`** con:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransmute(\n  flights,\n  dep_time,\n  hour = dep_time %/% 100,\n  minute = dep_time %% 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n   dep_time  hour minute\n      <int> <dbl>  <dbl>\n 1      517     5     17\n 2      533     5     33\n 3      542     5     42\n 4      544     5     44\n 5      554     5     54\n 6      554     5     54\n 7      555     5     55\n 8      557     5     57\n 9      557     5     57\n10      558     5     58\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   **Logaritmos:** `log()`, `log2()`, `log10()`. Los logaritmos son increíblemente útiles como transformación para trabajar con datos con múltiples órdenes de magnitud. También convierten las relaciones multiplicativas en aditivas, una característica que retomaremos en los capítulos sobre modelos. En igualdad de condiciones, recomendamos usar `log2()` porque es más fácil de interpretar: una diferencia de 1 en la escala de registro corresponde a la duplicación de la escala original y una diferencia de -1 corresponde a dividir a la mitad.\n\n-   **Rezagos:** `lead()` y `lag()` te permiten referirte a un valor adelante o un valor atrás (con rezago). Esto te permite calcular las diferencias móviles (por ejemplo, `x - lag(x)`) o encontrar cuándo cambian los valores `(x! = lag (x))`. Estos comandos son más útiles cuando se utilizan junto con `group_by()`, algo que aprenderás en breve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nlag(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] NA  1  2  3  4  5  6  7  8  9\n```\n:::\n\n```{.r .cell-code}\nlead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  3  4  5  6  7  8  9 10 NA\n```\n:::\n:::\n\n\n-   **Agregados acumulativos y móviles:** R proporciona funciones para ejecutar sumas, productos, mínimos y máximos: `cumsum()`, `cumprod()`, `cummin()`, `cummax()`; **dplyr**, por su parte, proporciona `cummean()` para las medias acumuladas. Si necesitas calcular agregados móviles (es decir, una suma calculada en una ventana móvil), prueba el paquete **RcppRoll**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\ncumsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  6 10 15 21 28 36 45 55\n```\n:::\n\n```{.r .cell-code}\ncummean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5\n```\n:::\n:::\n\n\n-   Comparaciones lógicas: `<`, `<=`, `>`, `>=`, `!=` sobre las cuales aprendiste antes. Si estás haciendo una secuencia compleja de operaciones lógicas, es a menudo una buena idea almacenar los valores provisionales en nuevas variables para que puedas comprobar que cada paso funciona como se espera.\n\n-   Ordenamiento: hay una serie de funciones de ordenamiento (ranking), pero deberías comenzar con `min_rank()`. Esta función realiza el tipo más común de ordenamiento (por ejemplo, primero, segundo, tercero, etc.). El valor predeterminado otorga la menor posición a los valores más pequeños; usa `desc(x)` para dar la menor posición a los valores más grandes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c (1, 2, 2, NA, 3, 4)\nmin_rank(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  2 NA  4  5\n```\n:::\n\n```{.r .cell-code}\nmin_rank(desc(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5  3  3 NA  2  1\n```\n:::\n:::\n\n\n-   Si `min_rank()` no hace lo que necesitas, consulta las variantes `row_number()`, `dense_rank()`, `percent_rank()`, `cume_dist()`, `quantile()`. Revisa sus páginas de ayuda para más detalles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_number(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  3 NA  4  5\n```\n:::\n\n```{.r .cell-code}\ndense_rank(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  2 NA  3  4\n```\n:::\n\n```{.r .cell-code}\npercent_rank(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.00 0.25 0.25   NA 0.75 1.00\n```\n:::\n\n```{.r .cell-code}\ncume_dist(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2 0.6 0.6  NA 0.8 1.0\n```\n:::\n:::\n\n\n### Resúmenes agrupados con summarise()\n\nEl último verbo clave es **`summarise()`** (resumir, en inglés). Se encarga de colapsar un data frame en una sola fila:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  delay\n  <dbl>\n1  12.6\n```\n:::\n:::\n\n\n`summarise()` no es muy útil a menos que lo enlacemos con `group_by()`. Esto cambia la unidad de análisis del conjunto de datos completo a grupos individuales. Luego, cuando uses los verbos **dplyr** en un data frame agrupado, estos se aplicarán automáticamente **\"por grupo\"**. Por ejemplo, si aplicamos exactamente el mismo código a un dataframe agrupado por fecha, obtenemos el retraso promedio por fecha:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_day <- group_by(flights, year, month, day)\nsummarize(by_day, delay = mean(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day delay\n   <int> <int> <int> <dbl>\n 1  2013     1     1 11.5 \n 2  2013     1     2 13.9 \n 3  2013     1     3 11.0 \n 4  2013     1     4  8.95\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.55\n 9  2013     1     9  2.28\n10  2013     1    10  2.84\n# … with 355 more rows\n```\n:::\n:::\n\n\nJuntos `group_by()` y `summarise()` proporcionan una de las herramientas que más comúnmente usarás cuando trabajes con dplyr: resúmenes agrupados. Pero antes de ir más allá con esto, tenemos que introducir una idea nueva y poderosa: el `pipe` (pronunciado /paip/, que en inglés significa ducto o tubería).\n\n## Combinación de múltiples operaciones con el pipe\n\nImagina que queremos explorar la relación entre la distancia y el atraso promedio para cada ubicación. Usando lo que sabes acerca de dplyr, podrías escribir un código como este:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_dest <- group_by(flights, dest)\ndelay <-\n  summarize(\n    by_dest,\n    count = n(),\n    dist = mean(distance, na.rm = TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n)\n# Parece que las demoras aumentan con las distancias hasta ~ 750 millas\n# y luego disminuyen. ¿Tal vez a medida que los vuelos se hacen más \n# largos, hay más habilidad para compensar las demoras en el aire?\nggplot(data = delay, mapping = aes(x = dist, y = delay)) +\n geom_point(aes(size = count), alpha = 1/3) +\n geom_smooth(se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](c03_parte2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nHay tres pasos para preparar esta información:\n\n1.  Agrupar los vuelos por destino.\n2.  Resumir para calcular la distancia, la demora promedio y el número de vuelos en cada grupo.\n3.  Filtrar para eliminar puntos ruidosos y el aeropuerto de Honolulu, que está casi dos veces más lejos que el próximo aeropuerto más cercano.\n\nEs un poco frustrante escribir este código porque tenemos que dar un nombre a cada data frame intermedio, incluso si el dataframe en sí mismo no nos importa. Nombrar cosas es difícil y **dilata el tiempo** de nuestro análisis.\n\nHay otra forma de abordar el mismo problema con el pipe, **`%>%`**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelays <- flights %>% \n  group_by(dest) %>% \n  summarise(\n    count = n(),\n    dist = mean(distance, na.rm = TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) %>% \n  filter(count > 20, dest != \"HNL\")\n```\n:::\n\n\nEste código se enfoca en las transformaciones, no en lo que se está transformando, lo que hace que sea más fácil de leer. Puedes leerlo como una serie de declaraciones imperativas: **agrupa**, luego **resume** y luego **filtra**. Como sugiere esta lectura, una buena forma de pronunciar **`%>%`** cuando se lee el código es **\"luego\"**.\n\nLo que ocurre detrás del código, es que **x %\\>% f(y)** se convierte en **f(x, y)**, y **x %\\>% f(y) %\\>% g(z)** se convierte en **g(f(x, y), z)** y así sucesivamente. Puedes usar el ***pipe*** para reescribir múltiples operaciones de forma que puedas leer de izquierda a derecha, de arriba hacia abajo. **Usaremos pipes con frecuencia a partir de ahora porque mejora considerablemente la legibilidad del código**. Volveremos a este tema con más detalles en pipes.\n\nTrabajar con el pipe es uno de los criterios clave para pertenecer al tidyverse. La única excepción es ggplot2: se escribió antes de que se descubriera el pipe. Lamentablemente, la siguiente iteración de ggplot2, ggvis, que sí utiliza el pipe, aún no está lista para el horario estelar.\n\n### Valores faltantes\n\nEs posible que te hayas preguntado sobre el argumento na.rm que utilizamos anteriormente. ¿Qué pasa si no lo configuramos?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(year, month, day) %>% \n  summarise(mean = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day  mean\n   <int> <int> <int> <dbl>\n 1  2013     1     1    NA\n 2  2013     1     2    NA\n 3  2013     1     3    NA\n 4  2013     1     4    NA\n 5  2013     1     5    NA\n 6  2013     1     6    NA\n 7  2013     1     7    NA\n 8  2013     1     8    NA\n 9  2013     1     9    NA\n10  2013     1    10    NA\n# … with 355 more rows\n```\n:::\n:::\n\n\n¡Obtenemos muchos valores faltantes! Esto se debe a que las funciones de agregación obedecen la regla habitual de valores faltantes: **si hay uno en el input**, **el output también será un valor faltante**. Afortunadamente, todas las funciones de agregación tienen un argumento **`na.rm`** que elimina los valores faltantes antes del cálculo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(year, month, day) %>% \n  summarise(mean = mean(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day  mean\n   <int> <int> <int> <dbl>\n 1  2013     1     1 11.5 \n 2  2013     1     2 13.9 \n 3  2013     1     3 11.0 \n 4  2013     1     4  8.95\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.55\n 9  2013     1     9  2.28\n10  2013     1    10  2.84\n# … with 355 more rows\n```\n:::\n:::\n\n\nEn este caso, en el que los valores faltantes representan vuelos cancelados, también podríamos abordar el problema eliminando primero este tipo de vuelos. Guardaremos este conjunto de datos para poder reutilizarlo en los siguientes ejemplos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled <- flights %>% \n  filter(!is.na(dep_delay), !is.na(arr_delay))\n\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(mean = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day  mean\n   <int> <int> <int> <dbl>\n 1  2013     1     1 11.4 \n 2  2013     1     2 13.7 \n 3  2013     1     3 10.9 \n 4  2013     1     4  8.97\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.56\n 9  2013     1     9  2.30\n10  2013     1    10  2.84\n# … with 355 more rows\n```\n:::\n:::\n\n\n#### Conteos\n\nSiempre que realices una agregación, es una buena idea incluir un conteo (**n()**) o un recuento de valores no faltantes (**sum(!is.na(x))**). De esta forma, puedes verificar que no estás sacando conclusiones basadas en cantidades muy pequeñas de datos. Por ejemplo, veamos los aviones (identificados por su número de cola) que tienen las demoras promedio más altas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelays <- not_cancelled %>% \n  group_by(tailnum) %>% \n  summarise(\n    delay = mean(arr_delay)\n  )\n\nggplot(data = delays, mapping = aes(x = delay)) + \n  geom_freqpoly(binwidth = 10) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](c03_parte2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n[¡Hay algunos aviones que tienen una demora promedio de 5 horas (300 minutos)!]{style=\"color:blue\"}\n\n</p>\n\nLa historia es en realidad un poco más matizada. Podemos obtener más información si hacemos un diagrama de dispersión del número de vuelos contra la demora promedio:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelays <- not_cancelled %>% \n  group_by(tailnum) %>% \n  summarise(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\nggplot(data = delays, mapping = aes(x = n, y = delay)) + \n  geom_point(alpha = 1/10) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](c03_parte2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nNo es sorprendente que haya una mayor variación en el promedio de retraso cuando hay pocos vuelos. La forma de este gráfico es muy característica: cuando trazas un promedio (o cualquier otra medida de resumen) contra el tamaño del grupo, verás que la variación decrece a medida que el tamaño de muestra aumenta.\n\nCuando se observa este tipo de gráficos, resulta útil eliminar los grupos con menor número de observaciones, ya que puedes ver más del patrón y menos de la variación extrema de los grupos pequeños. Esto es lo que hace el siguiente bloque de código. También te ofrece una manera muy útil para integrar ggplot2 en el flujo de trabajo de dplyr. **Es un poco incómodo tener que cambiar de %\\>% a +**, pero una vez que entiendas el código, verás que es bastante conveniente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelays %>% \n  filter(n > 25) %>% \n  ggplot(mapping = aes(x = n, y = delay)) + \n    geom_point(alpha = 1/10) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](c03_parte2_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nHay otra variación común de este tipo de patrón. Veamos cómo el rendimiento promedio de los bateadores en el béisbol está relacionado con el número de veces que les toca batear. Aquí utilizaremos el conjunto de datos de bateadores para calcular el promedio de bateo (número de bateos / número de intentos) de cada jugador de béisbol de las Grandes Ligas.\n\nCuando graficamos la habilidad del bateador (medido por el promedio de bateo, pb) contra el número de oportunidades para golpear la pelota (medido por el tiempo al bate,ab), verás dos patrones:\n\n1.  Como en el ejemplo anterior, la variación en nuestro estadístico de resumen disminuye a medida que obtenemos más observaciones.\n\n2.  Existe una correlación positiva entre la habilidad (pb) y las oportunidades para golpear la pelota (ab). Esto se debe a que los equipos controlan quién puede jugar y, obviamente, elegirán a sus mejores jugadores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to a tibble so it prints nicely\nbateo <- as_tibble(datos::bateadores)\n\nrendimiento_bateadores <- bateo %>% \n  group_by(id_jugador) %>% \n  summarise(\n    pb = sum(golpes, na.rm = TRUE) / sum(al_bate, na.rm = TRUE),\n    ab = sum(al_bate, na.rm = TRUE)\n  )\n\nrendimiento_bateadores %>% \n  filter(ab > 100) %>% \n  ggplot(mapping = aes(x = ab, y = pb)) +\n  geom_point() +\n  geom_smooth(se = FALSE) +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](c03_parte2_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nEsto también tiene implicaciones importantes para la clasificación. Si ingenuamente ordenas **`desc(pb)`**, verás que las personas con los mejores promedios de bateo tienen claramente mucha suerte, pero no son necesariamente hábiles:\n\nPuedes encontrar una buena explicación de este problema en <http://varianceexplained.org/r/empirical_bayes_baseball/> y <http://www.evanmiller.org/how-not-to-sort-by-average-rating.html>.\n\n## Funciones de resumen útiles\n\nSolo el uso de medias, conteos y sumas puede llevarte muy lejos, pero R proporciona muchas otras funciones de resumen útiles:\n\n-   **Medidas de posición:** `first(x)`, `nth(x, 2)`, `last(x)`. Estas trabajan de forma similar a `x[1]`, `x[2]` y `x[length (x)]`, pero te permiten establecer un valor predeterminado en el caso de que esa posición no exista (es decir, si estás tratando de obtener el tercer elemento de un grupo que solo tiene dos elementos). Por ejemplo, podemos encontrar la primera (first) y última (last) salida para cada día:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(\n    first_dep = first(dep_time), \n    last_dep = last(dep_time)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day first_dep last_dep\n   <int> <int> <int>     <int>    <int>\n 1  2013     1     1       517     2356\n 2  2013     1     2        42     2354\n 3  2013     1     3        32     2349\n 4  2013     1     4        25     2358\n 5  2013     1     5        14     2357\n 6  2013     1     6        16     2355\n 7  2013     1     7        49     2359\n 8  2013     1     8       454     2351\n 9  2013     1     9         2     2252\n10  2013     1    10         3     2320\n# … with 355 more rows\n```\n:::\n:::\n\n\n-   **Medidas de centralidad:** hemos usado `mean(x)`, pero `median(x)` también resulta muy útil. La media es la suma dividida por el número de observaciones; la mediana es un valor donde el 50% de x está por encima de él y el 50% está por debajo. A veces es útil combinar agregación con un subconjunto lógico.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(\n    avg_delay1 = mean(arr_delay),\n    avg_delay2 = mean(arr_delay[arr_delay > 0]) # the average positive delay\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day avg_delay1 avg_delay2\n   <int> <int> <int>      <dbl>      <dbl>\n 1  2013     1     1     12.7         32.5\n 2  2013     1     2     12.7         32.0\n 3  2013     1     3      5.73        27.7\n 4  2013     1     4     -1.93        28.3\n 5  2013     1     5     -1.53        22.6\n 6  2013     1     6      4.24        24.4\n 7  2013     1     7     -4.95        27.8\n 8  2013     1     8     -3.23        20.8\n 9  2013     1     9     -0.264       25.6\n10  2013     1    10     -5.90        27.3\n# … with 355 more rows\n```\n:::\n:::\n\n\n-   **Medidas de rango:** `min(x)`, `quantile(x, 0.25)`, `max(x)`. Los cuantiles son una generalización de la mediana. Por ejemplo, `quantile(x, 0.25)` encontrará un valor de x que sea mayor a 25% de los valores, y menor que el 75% restante.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(\n    first = min(dep_time),\n    last = max(dep_time)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day first  last\n   <int> <int> <int> <int> <int>\n 1  2013     1     1   517  2356\n 2  2013     1     2    42  2354\n 3  2013     1     3    32  2349\n 4  2013     1     4    25  2358\n 5  2013     1     5    14  2357\n 6  2013     1     6    16  2355\n 7  2013     1     7    49  2359\n 8  2013     1     8   454  2351\n 9  2013     1     9     2  2252\n10  2013     1    10     3  2320\n# … with 355 more rows\n```\n:::\n:::\n\n\n-   **Medidas de dispersión:** `sd(x)`, `IQR(x)`, `mad(x)`. La raíz cuadrad de la varianza o desviación estándar `sd(x)` es una medida estándar de dispersión. El rango intercuartil `IQR()` y la desviación media absoluta `mad(x`) son medidas robustas equivalentes que pueden ser más útiles si tienes **valores atípicos**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  group_by(dest) %>% \n  summarise(distance_sd = sd(distance)) %>% \n  arrange(desc(distance_sd))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 104 × 2\n   dest  distance_sd\n   <chr>       <dbl>\n 1 EGE         10.5 \n 2 SAN         10.4 \n 3 SFO         10.2 \n 4 HNL         10.0 \n 5 SEA          9.98\n 6 LAS          9.91\n 7 PDX          9.87\n 8 PHX          9.86\n 9 LAX          9.66\n10 IND          9.46\n# … with 94 more rows\n```\n:::\n:::\n\n\nEstas funciones son complementarias al filtrado en rangos. El filtrado te proporciona todas las variables, con cada observación en una fila distinta:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  mutate(r = min_rank(desc(dep_time))) %>% \n  filter(r %in% range(r)) %>%\n  dplyr::select(r)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`, `month`, `day`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 770 × 4\n# Groups:   year, month, day [365]\n    year month   day     r\n   <int> <int> <int> <int>\n 1  2013     1     1   831\n 2  2013     1     1     1\n 3  2013     1     2   928\n 4  2013     1     2     1\n 5  2013     1     3   900\n 6  2013     1     3     1\n 7  2013     1     4   908\n 8  2013     1     4     1\n 9  2013     1     4     1\n10  2013     1     5   717\n# … with 760 more rows\n```\n:::\n:::\n\n\n-   **Conteos:** has visto `n()`, que no toma argumentos y que devuelve el tamaño del grupo actual. Para contar la cantidad de valores no faltantes, usa `sum(!is.na (x))`. Para contar la cantidad de valores distintos (únicos), usa `n_distinct(x)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ¿Qué destinos tienen la mayoría de las aerolíneas?\nnot_cancelled %>% \n  group_by(dest) %>% \n  summarise(carriers = n_distinct(carrier)) %>% \n  arrange(desc(carriers))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 104 × 2\n   dest  carriers\n   <chr>    <int>\n 1 ATL          7\n 2 BOS          7\n 3 CLT          7\n 4 ORD          7\n 5 TPA          7\n 6 AUS          6\n 7 DCA          6\n 8 DTW          6\n 9 IAD          6\n10 MSP          6\n# … with 94 more rows\n```\n:::\n:::\n\n\nLos conteos son tan útiles que **dplyr** proporciona un ayudante simple si todo lo que quieres es un conteo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  count(dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 104 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     264\n 3 ALB     418\n 4 ANC       8\n 5 ATL   16837\n 6 AUS    2411\n 7 AVL     261\n 8 BDL     412\n 9 BGR     358\n10 BHM     269\n# … with 94 more rows\n```\n:::\n:::\n\n\nOpcionalmente puedes proporcionar una variable de ponderación. Por ejemplo, podrías usar esto para **\"contar\"** (sumar) el número total de millas que voló un avión:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_cancelled %>% \n  count(tailnum, wt = distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,037 × 2\n   tailnum      n\n   <chr>    <dbl>\n 1 D942DN    3418\n 2 N0EGMQ  239143\n 3 N10156  109664\n 4 N102UW   25722\n 5 N103US   24619\n 6 N104UW   24616\n 7 N10575  139903\n 8 N105UW   23618\n 9 N107US   21677\n10 N108UW   32070\n# … with 4,027 more rows\n```\n:::\n:::\n\n\n-   **Conteos y proporciones de valores lógicos:** `sum(x > 10)`, `mean(y == 0)`. Cuando se usan con funciones numéricas, `TRUE` se convierte en **1** y `FALSE` en **0**. Esto hace que `sum()` y `mean()` sean muy útiles: `sum(x)` te da la cantidad de `TRUE` en `x`, y `mean(x)` te da la proporción.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ¿Cuántos vuelos salieron antes de las 5 am? \n# (estos generalmente son vuelos demorados del día anterior)\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(n_early = sum(dep_time < 500))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day n_early\n   <int> <int> <int>   <int>\n 1  2013     1     1       0\n 2  2013     1     2       3\n 3  2013     1     3       4\n 4  2013     1     4       3\n 5  2013     1     5       3\n 6  2013     1     6       2\n 7  2013     1     7       2\n 8  2013     1     8       1\n 9  2013     1     9       3\n10  2013     1    10       3\n# … with 355 more rows\n```\n:::\n\n```{.r .cell-code}\n# ¿Qué proporción de vuelos se retrasan más de una hora?\nnot_cancelled %>% \n  group_by(year, month, day) %>% \n  summarise(hour_prop = mean(arr_delay > 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day hour_prop\n   <int> <int> <int>     <dbl>\n 1  2013     1     1    0.0722\n 2  2013     1     2    0.0851\n 3  2013     1     3    0.0567\n 4  2013     1     4    0.0396\n 5  2013     1     5    0.0349\n 6  2013     1     6    0.0470\n 7  2013     1     7    0.0333\n 8  2013     1     8    0.0213\n 9  2013     1     9    0.0202\n10  2013     1    10    0.0183\n# … with 355 more rows\n```\n:::\n:::\n\n\n### Agrupación por múltiples variables\n\nCuando agrupas por múltiples variables, cada resumen se desprende de un nivel de la agrupación. Eso hace que sea más fácil acumular progresivamente en un conjunto de datos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily <- group_by(flights, year, month, day)\n(per_day   <- summarise(daily, flights = n()))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day flights\n   <int> <int> <int>   <int>\n 1  2013     1     1     842\n 2  2013     1     2     943\n 3  2013     1     3     914\n 4  2013     1     4     915\n 5  2013     1     5     720\n 6  2013     1     6     832\n 7  2013     1     7     933\n 8  2013     1     8     899\n 9  2013     1     9     902\n10  2013     1    10     932\n# … with 355 more rows\n```\n:::\n\n```{.r .cell-code}\n(per_month <- summarise(per_day, flights = sum(flights)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n# Groups:   year [1]\n    year month flights\n   <int> <int>   <int>\n 1  2013     1   27004\n 2  2013     2   24951\n 3  2013     3   28834\n 4  2013     4   28330\n 5  2013     5   28796\n 6  2013     6   28243\n 7  2013     7   29425\n 8  2013     8   29327\n 9  2013     9   27574\n10  2013    10   28889\n11  2013    11   27268\n12  2013    12   28135\n```\n:::\n\n```{.r .cell-code}\n(per_year  <- summarise(per_month, flights = sum(flights)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   year flights\n  <int>   <int>\n1  2013  336776\n```\n:::\n:::\n\n\nTen cuidado al acumular resúmenes progresivamente: está bien para las sumas y los recuentos, pero debes pensar en la ponderación de las medias y las varianzas, además de que no es posible hacerlo exactamente para estadísticas basadas en rangos como la mediana. En otras palabras, la suma de las sumas agrupadas es la suma total, pero la mediana de las medianas agrupadas no es la mediana general.\n\n### Desagrupar\n\nSi necesitas eliminar la agrupación y regresar a las operaciones en datos desagrupados, usa ungroup().\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily %>% \n  ungroup() %>%             # no longer grouped by date\n  summarise(flights = n())  # all flights\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  flights\n    <int>\n1  336776\n```\n:::\n:::\n\n\n### Transformaciones agrupadas (y filtros)\n\nLa agrupación es más útil si se utiliza junto con summarise(), pero también puedes hacer operaciones convenientes con `mutate()` y `filter()`:\n\n-   Encuentra los peores miembros de cada grupo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sml %>% \n  group_by(year, month, day) %>%\n  filter(rank(desc(arr_delay)) < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,306 × 7\n# Groups:   year, month, day [365]\n    year month   day dep_delay arr_delay distance air_time\n   <int> <int> <int>     <dbl>     <dbl>    <dbl>    <dbl>\n 1  2013     1     1       853       851      184       41\n 2  2013     1     1       290       338     1134      213\n 3  2013     1     1       260       263      266       46\n 4  2013     1     1       157       174      213       60\n 5  2013     1     1       216       222      708      121\n 6  2013     1     1       255       250      589      115\n 7  2013     1     1       285       246     1085      146\n 8  2013     1     1       192       191      199       44\n 9  2013     1     1       379       456     1092      222\n10  2013     1     2       224       207      550       94\n# … with 3,296 more rows\n```\n:::\n:::\n\n\nEncuentra todos los grupos más grandes que un determinado umbral:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopular_dests <- flights %>% \n  group_by(dest) %>% \n  filter(n() > 365)\npopular_dests\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 332,577 × 19\n# Groups:   dest [77]\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 332,567 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Estandariza para calcular las métricas por grupo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopular_dests %>% \n  filter(arr_delay > 0) %>% \n  mutate(prop_delay = arr_delay / sum(arr_delay)) %>% \n  select(year:day, dest, arr_delay, prop_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 131,106 × 6\n# Groups:   dest [77]\n    year month   day dest  arr_delay prop_delay\n   <int> <int> <int> <chr>     <dbl>      <dbl>\n 1  2013     1     1 IAH          11  0.000111 \n 2  2013     1     1 IAH          20  0.000201 \n 3  2013     1     1 MIA          33  0.000235 \n 4  2013     1     1 ORD          12  0.0000424\n 5  2013     1     1 FLL          19  0.0000938\n 6  2013     1     1 ORD           8  0.0000283\n 7  2013     1     1 LAX           7  0.0000344\n 8  2013     1     1 DFW          31  0.000282 \n 9  2013     1     1 ATL          12  0.0000400\n10  2013     1     1 DTW          16  0.000116 \n# … with 131,096 more rows\n```\n:::\n:::\n\n\nUn filtro agrupado es una transformación agrupada seguida de un filtro desagrupado. En general, preferimos evitarlos, excepto para las manipulaciones rápidas y sucias: de lo contrario, es difícil comprobar que has hecho la manipulación correctamente.\n\nLas funciones que trabajan de forma más natural en transformaciones agrupadas y filtros se conocen como funciones de ventana o window functions (frente a las funciones de resumen utilizadas para los resúmenes). Puedes obtener más información sobre las funciones de ventana útiles en la viñeta correspondiente: `vignette(\"window-functions\")`.\n",
    "supporting": [
      "c03_parte2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}