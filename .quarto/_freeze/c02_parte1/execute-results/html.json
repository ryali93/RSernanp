{
  "hash": "9c62123289b6224fc219097701f3c5dd",
  "result": {
    "markdown": "# Conceptos Básicos de R - Parte 2\n\n## Lectura / escritura de datos (.csv, .xlsx, .RData, .rds)\n\n<p style=\"text-align: justify;\">\n\nEn la pestaña en Entorno **(Environment)** de **RStudio** podemos importar conjuntos de datos o datasets con el asistente de importación. No es recomendable cuando debemos importar varios archivos o si se van a leer archivos grandes. Para lo cual es más eficiente usar código.\n\n</p>\n\n<p align=\"center\">\n\n\n```{=html}\n<img src=\"https://bookdown.org/chescosalgado/intro_r/img/manual_import.png\n\" width=\"600\"/>\n```\n\n</p>\n\n### CSV\n\nSi conocemos la estructura de nuestros datos (por ejemplo, la primera fila es el título de las columnas o es un archivo separado por comas), Se pueden utilizar las funciones **`read.csv` (librería base) o `read_csv` (librería readr, de tidyverse)**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# datos será un 'data frame'\ndata01 <- read.csv(file = 'data/file.csv')\nhead(data01)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n```{.r .cell-code}\n# datos será un 'tibble'\ndata01 <- readr::read_csv(file = 'data/file.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 150 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Species\ndbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndata01\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# … with 140 more rows\n```\n:::\n:::\n\n\nEn otros casos, cuando `\";\"` es utilizado como el separador de campo y `\",\"` para el punto decimal, se utiliza una variante de estas funciones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# datos será un 'data frame'\ndata02 <- read.csv(file = 'data/file.csv', sep = ',', header = T)\n```\n:::\n\n\nLa escritura de datos se realiza de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(x = data02, file = \"data/csv_data.csv\")\n```\n:::\n\n\n### EXCEL\n\nEs posible leer datos en la forma `.xls` o `.xlsx`. Existen distintos paquetes que nos permiten hacerlo:\n\n-   El paquete **readxl** contiene la función `read_excel`.\n-   El paquete **xlsx** y la función `read.xlsx`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# datos será un 'data frame'\ndata03 <- readxl::read_xls(path = \"data/file.xls\", sheet = 1)\ndata03 <- xlsx::read.xlsx(file = \"data/file.xls\", 1)\n```\n:::\n\n\nLa escritura de datos se realiza de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxlsx::write.xlsx(\n  data03, \"data/xlsx_data.xlsx\", sheetName = \"Sheet1\", \n  col.names = TRUE, row.names = TRUE, append = FALSE\n)\n```\n:::\n\n\n### RDS\n\nR proporciona dos formatos de archivo propios para almacenar datos, **.RDS** y **.RData** . Los archivos **RDS** pueden almacenar **un solo objeto R** y los archivos **RData** pueden almacenar **varios objetos R**.\n\nPuede abrir un archivo RDS con `readRDS`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata04 <- readRDS(\"data/file.RDS\")\n```\n:::\n\n\nLa escritura de datos se realiza de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(data04, file = \"data/rds_data.RDS\")\n```\n:::\n\n\n### RDATA\n\nLa escritura de estos datos se realiza de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- 2\nc <- 3\nsave(a, b, c, file = \"data/stuff.RData\")\n```\n:::\n\n\nPuede abrir un archivo RData con `load`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/stuff.RData\")\n```\n:::\n\n\n## Control de Flujo Condicionales\n\n## Control de Flujo de Iteradores\n\n## Funciones\n\n## Paquetes y librerías\n\nLos paquetes de R amplían la funcionalidad de R al proporcionar funciones, datos y documentación adicionales.Están escritos por una comunidad mundial de usuarios de R y pueden ser instalados desde la interfaz gráfica de RStudio\n\nSolo tienes que instalar el paquete una vez, si desea actualizar un paquete previamente instalado a una versión más nueva, puede ir a la ventana de Ficheros en Packages \\> Update y seleccionar los paquetes que desea actualizar.\n\n<p style=\"text-align: justify;\">\n\nNo podrá utilizar las funciones, los objetos y los archivos de ayuda de un paquete hasta que lo cargue con **`library()`**. Una vez que haya instalado un paquete, puede cargarlo con la función **`library()`**:\n\n</p>\n\n\n\n\n\n### Diferencias entre paquetes y librerías\n\nEn el caso de la función `library()`, en muchas ocasiones existe la confusión entre un paquete y una librería, y podemos encontrarnos con gente llamando \"librerías\" a los paquetes.\n\nUna cosa es la función `library()` usada para cargar un paquete, y que se refiere al lugar en dónde el paquete es localizado, habitualmente una carpeta en nuestro ordenador, y otra un paquete que es una colección de funciones y datos empaquetados de forma conveniente.\n\nDicho de otra manera, y en palabras de Hadley Wickham, científico de datos en RStudio, y creador de la gran mayoría de paquetes del ecosistema tidyverse:\n\n<p align=\"center\">\n\n<img src=\"fig/s01_difference_library.png\" width=\"400\"/>\n\n</p>\n\nDe igual manera, para recordar la diferencia es ejecutar la función library() sin argumentos. Esto nos proporcionará una lista de paquetes instalados en diferentes librerías en nuestro ordenador.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install packages\ninstall.packages(\"tidyverse\")\n# Load packages\nlibrary(tidyverse)\n# You can also use \"pacman\" package to install\n#  an loading other packages\nif (!require(\"pacman\")) {\n  install.packages(\"pacman\")\n}\npacman::p_load(\n  tidyverse, formatR, knitr, rmdformats, pander, labelled, readxl, magrittr, kableExtra,\n  Lahman, datos\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}